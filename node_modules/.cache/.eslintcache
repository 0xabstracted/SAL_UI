[{"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/index.tsx":"1","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/App.tsx":"2","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/reportWebVitals.ts":"3","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/Home.tsx":"4","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/config/config.ts":"5","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/progress-bar.tsx":"6","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/menu.tsx":"7","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/AddToBankWhitelist.tsx":"8","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/config/connection.tsx":"9","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/FundRewardAlpha.tsx":"10","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/AssociatedTokenAccountProgram/pda.ts":"11","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/gemBank/getProgramObjects.ts":"12","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/tokenMetadata/constants.ts":"13","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/CreateFungibleToken.tsx":"14","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/programs/candy-machine.ts":"15","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/InitFarmAlpha.tsx":"16","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/StakeConfig.ts":"17","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/gemBank/pda.ts":"18","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/AssociatedTokenAccountProgram/constants.ts":"19","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/AlphaTokenConfig.ts":"20","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/nft-utilities/readTraits.ts":"21","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/utils/utils.ts":"22","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/AuthorizeFunderAlpha.tsx":"23","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/MintNewFungibleToken.tsx":"24"},{"size":445,"mtime":1664993673536,"results":"25","hashOfConfig":"26"},{"size":2278,"mtime":1664993673499,"results":"27","hashOfConfig":"26"},{"size":425,"mtime":1664993673538,"results":"28","hashOfConfig":"26"},{"size":105196,"mtime":1665317064959,"results":"29","hashOfConfig":"26"},{"size":3126,"mtime":1664993673501,"results":"30","hashOfConfig":"26"},{"size":724,"mtime":1664993673501,"results":"31","hashOfConfig":"26"},{"size":1828,"mtime":1664997324474,"results":"32","hashOfConfig":"26"},{"size":7862,"mtime":1665225101396,"results":"33","hashOfConfig":"26"},{"size":14608,"mtime":1664993673501,"results":"34","hashOfConfig":"26"},{"size":4292,"mtime":1664993673498,"results":"35","hashOfConfig":"26"},{"size":1076,"mtime":1665315088662,"results":"36","hashOfConfig":"26"},{"size":1581,"mtime":1664993673017,"results":"37","hashOfConfig":"26"},{"size":159,"mtime":1664993673018,"results":"38","hashOfConfig":"26"},{"size":6487,"mtime":1665327115849,"results":"39","hashOfConfig":"26"},{"size":19002,"mtime":1664993673537,"results":"40","hashOfConfig":"26"},{"size":7232,"mtime":1665316917174,"results":"41","hashOfConfig":"26"},{"size":7563,"mtime":1665225101408,"results":"42","hashOfConfig":"26"},{"size":2779,"mtime":1664993673018,"results":"43","hashOfConfig":"26"},{"size":179,"mtime":1664993673017,"results":"44","hashOfConfig":"26"},{"size":2227,"mtime":1665327181220,"results":"45","hashOfConfig":"26"},{"size":745,"mtime":1664993673536,"results":"46","hashOfConfig":"26"},{"size":3191,"mtime":1664993673538,"results":"47","hashOfConfig":"26"},{"size":4848,"mtime":1665225101406,"results":"48","hashOfConfig":"26"},{"size":11062,"mtime":1665326790716,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"k86iur",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/index.tsx",[],[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/App.tsx",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/reportWebVitals.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/Home.tsx",["127"],["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable jsx-a11y/alt-text */\n/* eslint-disable eqeqeq */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\n\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport Carousel from \"react-multi-carousel\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport 'react-circular-progressbar/dist/styles.css';\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { BN, Program } from \"@project-serum/anchor\";\n\nimport { PublicKey, SystemProgram, Transaction, clusterApiUrl, Connection } from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { Metaplex } from \"@metaplex-foundation/js\"\n\nimport MobileMenu from \"../assets/mobile_menu.png\";\nimport Twitter from \"../assets/twitter_copy.png\";\nimport Discord from \"../assets/discord.png\";\nimport LogoWhite from \"../assets/Logowhite.png\";\nimport LogoWhiteCropped from \"../assets/Logowhite_cropped.png\";\nimport KatanaImage from \"../assets/katana.png\";\nimport PizzaImage from \"../assets/pizza.png\";\nimport FanSpinning from \"../assets/fan_spinning.mp4\";\nimport Sopha from \"../assets/sopha.png\";\nimport Beanbag from \"../assets/bean_bag.png\";\nimport SophaSider from \"../assets/sopha_sider.png\";\nimport CloseAlpha from \"../assets/turn-back.png\";\nimport Close from \"../assets/close.png\";\nimport AlphaScroll from \"../assets/down-arrow.png\";\nimport Dev1 from \"../assets/dev1.png\";\nimport Dev2 from \"../assets/dev2.png\";\nimport Sashi from \"../assets/sashi.png\";\nimport Wallace from \"../assets/wallace.png\";\nimport Gabriel from \"../assets/gabriel.png\";\nimport Kaizer from \"../assets/kaizer.png\";\nimport Walter from \"../assets/walter.png\";\nimport Yogantar from \"../assets/yogantar.png\";\nimport SwappingIcon from \"../assets/swapping_icon.png\";\nimport ProgressBar from \"./progress-bar\";\nimport 'react-circular-progressbar/dist/styles.css';\n\nimport {\n  pdaSeed,\n  pdaWhitelistSeed,\n  MAGIC_HAT_CREATOR,\n  GOG_TIME,\n  WL_TIME,\n  PUBLIC_TIME,\n  COMMUNITY_TIME,\n  FARM_ID,\n  TOKEN_PROGRAM_ID,\n  BASEMENT_FARM_ID,\n  COLLECTION_ID,\n  REWARD_MINT,\n  FEE_WALLET,\n  MAGIC_HAT_PROGRAM_V2_ID\n} from \"../config/config\";\n\nimport { sendTransaction, sendTransactions } from \"../config/connection\";\n\nimport { AlertState } from \"../utils/utils\";\nimport {\n  createInitializeMintInstruction,\n  MINT_SIZE,\n  getMinimumBalanceForRentExemptMint,\n  getAssociatedTokenAddress,\n  createAssociatedTokenAccountInstruction,\n  createMintToCheckedInstruction,\n} from \"@solana/spl-token\";\n\nimport * as mpl from \"@metaplex-foundation/mpl-token-metadata\";\n\nimport {\n  MagicHatAccount,\n  getMagicHatState,\n} from \"../programs/candy-machine\";\n\nimport idl from \"../idl/magic_hat.json\";\n\n\nimport { findAssociatedTokenAddress } from \"../GrandProgramUtils/AssociatedTokenAccountProgram/pda\";\nimport { MAGIC_STAKE_PROGRAM_ID, GEM_BANK_PROGRAM_ID, getBankProgram, getStakeProgram } from \"../GrandProgramUtils/gemBank/getProgramObjects\";\nimport { FixedRateConfig, RarityConfig } from \"../GrandProgramUtils/gemBank/interface\";\nimport { TOKEN_METADATA_PROGRAM_ID } from \"../GrandProgramUtils/tokenMetadata/constants\";\n\nimport MenuContent from \"./menu\";\nimport InitFarmAlpha from \"./AlphaStaking/InitFarmAlpha\";\nimport AddToBankWhitelist from \"./AlphaStaking/AddToBankWhitelist\";\nimport FundRewardAlpha from \"./AlphaStaking/FundRewardAlpha\";\nimport CreateFungibleToken from \"./TokenCreation/CreateFungibleToken\";\n\nimport { CYBORGPET_FARM_ID, CYBORG_FARM_ID, HUMANPETS_FARM_ID, HUMANS_FARM_ID, REWARD_MINT_ALPHA } from \"./AlphaStaking/StakeConfig\";\nimport { REWARD_MINT_GLITCH } from \"./TokenCreation/AlphaTokenConfig\";\nimport MintNewFungibleToken from \"./TokenCreation/MintNewFungibleToken\";\n\nconst responsive = {\n  superLargeDesktop: {\n    breakpoint: { max: 4000, min: 3000 },\n    items: 5,\n  },\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 3,\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 464 },\n    items: 2,\n  },\n  mobile: {\n    breakpoint: { max: 464, min: 0 },\n    items: 1,\n  },\n};\n\ninterface LpTierConfig {\n  lpTierRate: BN;\n  lpRequiredTenure: BN;\n}\n\ninterface ProbTierConfig {\n  probableRewardRate: BN;\n  probability: BN;\n}\n\ninterface ProbableRateScheduleStake {\n  prob1: ProbTierConfig | null;\n  prob2: ProbTierConfig | null;\n  prob3: ProbTierConfig | null;\n  prob4: ProbTierConfig | null;\n  prob5: ProbTierConfig | null;\n  denominator: BN;\n}\n\ninterface LpRateScheduleStake {\n  lpBaseRate: BN;\n  lpTier1: LpTierConfig | null;\n  lpTier2: LpTierConfig | null;\n  lpTier3: LpTierConfig | null;\n  lpDenominator: BN;\n}\n\n\ninterface LpRateConfig {\n  lpSchedule: LpRateScheduleStake;\n  lpDurationSec: BN;\n}\n\ninterface ProbableRateConfig {\n  probableSchedule: ProbableRateScheduleStake;\n  probableAmount: BN;\n  probableDurationSec: BN;\n}\n\ninterface WhiteListType {\n  whitelist_type: string;\n  number_of_whitelist_spots_total: any;\n  mint_price: any;\n  start_time: any;\n}\n\nexport interface HomeProps {\n  magicHatId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  // const url = window.location.origin;\n  // if (!url.includes('https')) {\n  //   if (url.split(':')[2]) {\n  //     var loc:any = 'https:' + url.split(':')[1] + ':' +  + url.split(':')[2];\n  //     window.location = loc;\n  //   }\n  //   else {\n  //     var loc:any = 'https:' + url.split(':')[1];\n  //     window.location = loc;\n  //   }\n  // }\n  const [magicHat, setMagicHat] = useState<MagicHatAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [classNameState, setClassNameState] = useState<string>(\n    \"main-bg-after-door-open black-bg\"\n  );\n  const [isMobile, setIsMobile] = useState(false);\n  const [logoLoading] = useState(false);\n  const [logoAlphaLoading, setLogoAlphaLoading] = useState(true);\n  const [showFarming, setShowFarming] = useState(false);\n  const [showMessage, setShowMessage] = useState(false);\n  const [messageText, setMessageText] = useState(\"\");\n  const [showAlphaRoom, setShowAlphaRoom] = useState(false);\n  const [showStakeRoom, setShowStakeRoom] = useState(false);\n  const [showTeamRoom, setShowTeamRoom] = useState(false);\n  const [showFirstPhil, setShowFirstPhil] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [showMobileDoor, setShowMobileDoor] = useState(false);\n  const [mobileDoor, setMobileDoor] = useState(null);\n  const [showTeamInfo, setShowTeamInfo] = useState(false);\n  const [shouldMint, setShouldMint] = useState(false);\n  const [teamInfoMember, setTeamInfoMember] = useState<any>(null);\n  const [whitelists, setWhitelists] = useState<any>(null);\n  const [currentWl, setCurrentWl] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [showWhitelist, setShowWhitelist] = useState(false);\n  const [showStakeCity, setShowStakeCity] = useState(false);\n  const [showStaking, setShowStaking] = useState(false);\n  const [roomOneInfoClass, setRoomOneInfoClass] = useState(\"stake-room-info-one\");\n  const [roomTwoInfoClass, setRoomTwoInfoClass] = useState(\"stake-room-info-one\");\n  const [roomThreeInfoClass, setRoomThreeInfoClass] = useState(\"stake-room-info-one\");\n  const [roomFourInfoClass, setRoomFourInfoClass] = useState(\"stake-room-info-one\");\n  const [roomFiveInfoClass, setRoomFiveInfoClass] = useState(\"stake-room-info-one\");\n  const [createdWlCounts, setCreatedWlCounts] = useState(0);\n  const [nftStakeStep, setNftStakeStep] = useState(0);\n  const [currentStakeRoom, setCurrentStakeRoom] = useState(0);\n  const [stakedNft, setStakedNft] = useState<any>(null);\n  const [unstakedNft, setUnstakedNft] = useState<any>(null);\n  const [stakedNfts, setStakedNfts] = useState<any>([]);\n  const [stakedTokens, setStakedTokens] = useState<any>(0);\n  const [multiplierLevel, setMultiplierLevel] = useState<any>(0);\n  const [respectEarned, setRespectEarned] = useState<any>(0);\n  const [stakedCity, setStakedCity] = useState(\"\");\n  const [mintResponse, setMintResponse] = useState(\"\");\n  const [collectionId, setCollectionId] = useState<any>(\"\");\n  const [mintResponseType, setMintResponseType] = useState(\"\");\n  const [maxCount, setMaxCount] = useState<number>(3);\n  const [setBars] = useState([\n    2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n    42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,\n    80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,\n  ]);\n  const [gotNfts, setGotNfts] = useState(false);\n  const [showStakeDashboard, setShowStakeDashboard] = useState(false);\n  const [nfts, setNFts] = useState<any>([]);\n  const [farm, setFarm] = useState<any>(null);\n  const [humanFarm, setHumanFarm] = useState<any>(null);\n  const [humanPetsFarm, setHumanPetsFarm] = useState<any>(null);\n  const [cyborgFarm, setCyborgFarm] = useState<any>(null);\n  const [cyborgPetFarm, setCyborgPetFarm] = useState<any>(null);\n  const [basementFarm, setBasementFarm] = useState<any>(null);\n  const [farmer, setFarmer] = useState<any>(null);\n  const [farmerHuman, setFarmerHuman] = useState<any>(null);\n  const [farmerHumanPet, setFarmerHumanPet] = useState<any>(null);\n  const [farmerCyborg, setFarmerCyborg] = useState<any>(null);\n  const [farmerCyborgPet, setFarmerCyborgPet] = useState<any>(null);\n  const [farmerBasement, setFarmerBasement] = useState<any>(null);\n  const [funderOne, setFunderOne] = useState<any>(\"\");\n  const [funderTwo, setFunderTwo] = useState<any>(\"\");\n  const [funderThree, setFunderThree] = useState<any>(\"\");\n  const [funderFour, setFunderFour] = useState<any>(\"\");\n  const [funderFive, setFunderFive] = useState<any>(\"\");\n  const [nftMint, setNftMint] = useState<any>(\"\");\n  const [collectionIdMint, setCollectionIdMint] = useState<any>(\"\");\n  const [showFixedStakingRoom, setShowFixedStakingRoom] = useState(false);\n  const [showTokenSwapping, setShowTokenSwapping] = useState(false);\n  const [glitchTokenVal, setGlitchTokenVal] = useState(0);\n  const [alphaTokenVal, setAlphaTokenVal] = useState(0);\n\n  const wallet = useWallet();\n  // wallet.connect();\n\n  const anchorWallet = useMemo(() => {\n    // wallet.connect();\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshMagicHatState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.magicHatId) {\n      try {\n        const cndy = await getMagicHatState(\n          anchorWallet,\n          props.magicHatId,\n          props.connection\n        );\n        console.log(JSON.stringify(cndy.state, null, 4));\n        const k: any = cndy?.state.itemsRedeemed.toString()!;\n        const l: any = cndy?.state.itemsAvailable.toString()!;\n        setMagicHat(cndy);\n      } catch (e) {\n        console.log(\"There was a problem fetching Candy Machine state\");\n        console.log(e);\n      }\n    }\n  }, [anchorWallet, props.magicHatId, props.connection]);\n\n\n\n  // const createVRFAccount = async () => {\n  //   let payer = anchor.web3.Keypair.generate();\n  //   const program = await loadSwitchboardProgram(\"devnet\", undefined, payer);\n  //   const queueAccount = new queueAccount({ program, publicKey: queueKey });\n  //   const queue = await queueAccount.loadData();\n\n  //   // load client program used for callback\n  //   const vrfClientProgram = anchor.workspace\n  //     .AnchorVrfParser as anchor.Program<AnchorVrfParser>;\n  //   const vrfSecret = anchor.web3.Keypair.generate();\n\n  //   const vrfIxCoder = new anchor.BorshInstructionCoder(vrfClientProgram.idl);\n  //   const vrfClientCallback: Callback = {\n  //     programId: vrfClientProgram.programId,\n  //     accounts: [\n  //       // ensure all accounts in updateResult are populated\n  //       { pubkey: vrfClientKey, isSigner: false, isWritable: true },\n  //       { pubkey: vrfSecret.publicKey, isSigner: false, isWritable: false },\n  //     ],\n  //     ixData: vrfIxCoder.encode(\"updateResult\", \"\"), // pass any params for instruction here\n  //   };\n\n  //   // create VRF\n  //   const vrfAccount = await VrfAccount.create(program, {\n  //     queue: queueAccount,\n  //     callback: vrfClientCallback,\n  //     authority: vrfClientKey, // vrf authority\n  //     keypair: vrfSecret,\n  //   });\n\n  //   // create permission\n  //   const permissionAccount = await PermissionAccount.create(program, {\n  //     authority: queue.authority,\n  //     granter: queue.publicKey,\n  //     grantee: vrfAccount.publicKey,\n  //   });\n\n  //   // if queue has not enabled unpermissionedVrfEnabled, queue will need to grant permission\n  //   let queueAuthority: anchor.web3.Keypair;\n  //   await permissionAccount.set({\n  //     authority: queueAuthority,\n  //     permission: SwitchboardPermission.PERMIT_VRF_REQUESTS,\n  //     enable: true,\n  //   });\n  // }\n\n  const openStaking = async () => {\n    setShowStaking(true);\n  }\n\n\n  let nftStakeStepCount = 0;\n\n  const nextStepStake = async () => {\n    nftStakeStepCount = nftStakeStep;\n    console.log(nftStakeStepCount);\n    if(nftStakeStepCount == 0) {\n      nftStakeStepCount = nftStakeStepCount + 1;\n      setNftStakeStep(nftStakeStepCount);\n      completeStake();\n    }\n    else {\n      if (stakedCity && stakedCity.length > 0 && nftStakeStepCount == 0) {\n        nftStakeStepCount = nftStakeStepCount + 2;\n        setNftStakeStep(nftStakeStepCount);\n        completeStake();\n      }\n      else {\n        nftStakeStepCount = nftStakeStepCount + 1;\n        setNftStakeStep(nftStakeStepCount);\n      }\n    }\n  }\n\n  const closeStaking = async () => {\n    setNftStakeStep(0);\n    setStakedNft(null);\n    setStakedCity(\"\");\n    setShowStaking(false);\n  }\n\n  const getWhitelistAccounts = async () => {\n    if (\n      wallet &&\n      wallet.publicKey &&\n      wallet.publicKey.toBase58().length > 0 &&\n      !shouldMint &&\n      whitelists != null\n    ) {\n      const whitelistAccounts = Object.keys(whitelists);\n      console.log(whitelists);\n      if (whitelistAccounts && whitelistAccounts.length > 0) {\n        for (let index = 0; index < whitelistAccounts.length; index++) {\n          const element = whitelistAccounts[index];\n          if (wallet.publicKey?.toBase58() === element) {\n            if (\n              whitelists[element].numberOfWhitelistSpotsPerUser.toNumber() > 0\n            ) {\n              setShouldMint(true);\n              break;\n            } else {\n              setShouldMint(true);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    // anchor.Wallet.C;\n    // refreshMagicHatState();\n    var elem: HTMLElement | null = document.getElementById(\"main\");\n    if (elem!.clientWidth < 480) {\n      setIsMobile(true);\n    }\n    // console.log(currentWl);\n    setTimeout(function () {\n      setClassNameState(\"main-bg-after-door-open\");\n      setLogoAlphaLoading(false);\n      getWhitelistAccounts();\n      getNFTs();\n      getStakedNfts();\n      getFarms();\n      getFarmers();\n      getTimeToMInt();\n    }, 900);\n  }, [\n    anchorWallet,\n    props.magicHatId,\n    props.connection,\n    refreshMagicHatState,\n    wallet,\n    whitelists,\n    shouldMint,\n    currentWl,\n  ]);\n\n  const showToaster = async (id: any) => {\n    if (id === 1) {\n      setShowMessage(true);\n      setMessageText(\"Wonder how that binary cheese tastes like?\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 2) {\n      setShowMessage(true);\n      setMessageText(\"Better if you let jesse handle that\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 3) {\n      setShowMessage(true);\n      setMessageText(\"WAGShhh, hide it back again\");\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 4) {\n      setShowMessage(true);\n      setMessageText(\"Holy shit this is comfy af\");\n\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    } else if (id === 5) {\n      var arr = [\n        \"Patience is key\",\n        \"Shh...\",\n        \"Not yet, the time will come\",\n        \"Calm down man\",\n        \"It's locked, come back later.\",\n      ];\n      var k = Math.floor(Math.random() * 5);\n      // k = k - 1;\n      setShowMessage(true);\n      setMessageText(arr[k]);\n\n      setTimeout(function () {\n        setShowMessage(false);\n        setMessageText(\"\");\n      }, 900);\n    }\n  };\n\n  const getProgram = async () => {\n    const wallet_t: any = wallet;\n    const provider = new anchor.Provider(\n      props.connection,\n      wallet_t,\n      anchor.Provider.defaultOptions()\n    );\n    const idl_o: any = idl;\n    return new Program(idl_o, MAGIC_HAT_PROGRAM_V2_ID, provider);\n  };\n\n  const findFarmAuthorityPDA = async (farm: PublicKey) => {\n    return PublicKey.findProgramAddress([farm.toBytes()], MAGIC_STAKE_PROGRAM_ID);\n  };\n\n  const findFarmTreasuryPDA = (farm: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('treasury'), farm.toBytes()],\n      MAGIC_STAKE_PROGRAM_ID\n    );\n  };\n\n  const findRewardsPotPDA = (farm: PublicKey, rewardMint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('reward_pot'), farm.toBytes(), rewardMint.toBytes()],\n      MAGIC_STAKE_PROGRAM_ID\n    );\n  };\n\n  const findFarmTreasuryTokenPDA = (farm: PublicKey, rewardMint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('token_treasury'), farm.toBytes(), rewardMint.toBytes()],\n      MAGIC_STAKE_PROGRAM_ID\n    );\n  };\n\n  const funderToAuthorizePDA = (farm: PublicKey, funder_to_authorize: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('authorization'), farm.toBytes(), funder_to_authorize.toBytes()],\n      MAGIC_STAKE_PROGRAM_ID\n    );\n  };\n\n  const farmerPDA = (farm: PublicKey, farmer: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('farmer'), farm.toBytes(), farmer.toBytes()],\n      MAGIC_STAKE_PROGRAM_ID\n    );\n  };\n\n  const farmerVaultPDA = (bank: PublicKey, creator: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('vault'), bank.toBytes(), creator.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n\n  const gemBoxPda = (vault: PublicKey, gem_mint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('gem_box'), vault.toBytes(), gem_mint.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n\n  const gemDepositBoxPda = (vault: PublicKey, gem_mint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('gem_deposit_receipt'), vault.toBytes(), gem_mint.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n\n  const gemBoxRarityPda = (bank: PublicKey, gem_mint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('gem_rarity'), bank.toBytes(), gem_mint.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n  \n  const vaultAuthorityPda = (valut: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [valut.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n  \n  const whitelistProofPda = (bank: PublicKey, address_to_whitelist: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('whitelist'),bank.toBytes(), address_to_whitelist.toBytes()],\n      GEM_BANK_PROGRAM_ID\n    );\n  };\n\n  const tokenMetadataPda = (mint: PublicKey) => {\n    return PublicKey.findProgramAddress(\n      [Buffer.from('metadata'),TOKEN_METADATA_PROGRAM_ID.toBytes(), mint.toBytes()],\n      TOKEN_METADATA_PROGRAM_ID\n    );\n  };\n\n\n\n  async function getStakedNfts() {\n    if (wallet && wallet.connected) {\n      const bankProgram = await getBankProgram(wallet);\n      // const [farmerVaultPda] = await farmerVaultPDA(\n      //   farms.bank,\n      //   wallet.publicKey!\n      // );\n      const gdprs:any = await bankProgram.account.gemDepositReceipt.all();\n      // console.log(gdprs);\n      var array:any = [];\n      for (let index = 0; index < gdprs.length; index++) {\n        const element = gdprs[index];\n        const connection = new Connection(clusterApiUrl(\"devnet\"));\n        const metaplex = new Metaplex(connection);\n        let nft = await metaplex.nfts().findByMint(element.account.gemMint).run();\n        if (nft.updateAuthorityAddress == new PublicKey(\"2LpGioZAG2GkzBpTye4e3jqQWiEL7mFBo74B6yvCmTaw\") && nft.creators[0].address == new PublicKey(\"BNZy4DXcGZRpkkgnQn5nfqnkMPjjh7NLk1KBTe8qqtmZ\")) {\n          var xhr = new XMLHttpRequest();\n          xhr.addEventListener(\"readystatechange\", function() {\n            if(this.readyState === 4) {\n              var obj:any = {\n                name: nft.name,\n                link: JSON.parse(this.responseText).image,\n              }\n              // console.log(obj);\n              array.push(obj);\n            }\n          });\n          xhr.open(\"GET\", nft.uri);\n          xhr.send();\n        }\n      }\n      if (array && array.length > 0) {\n        setStakedNfts(array);\n        // setStakedTokens(array.length * 100);\n        // setRespectEarned(array.length * 100);\n        // setMultiplierLevel(array.length);\n      }\n    }\n  }\n\n  \n\n  // Farm Manager Should call this\n\n  // Farm Manager Should call this\n\n\n  const closeFarming = async () => {\n    setShowFarming(false);\n    setFunderOne('');\n    setFunderTwo('');\n    setFunderThree('');\n    setFunderFour('');\n    setFunderFive('');\n  }\n\n  // Farm Manager should call this\n\n  const getFarmers = async () => {\n    if(wallet && wallet.connected) {\n      const stakeProgram = await getStakeProgram(wallet);\n      try {\n        const [humanFarmerVar] = await farmerPDA(\n          HUMANS_FARM_ID,\n          wallet.publicKey!\n        );\n        const farmersHuman:any = await stakeProgram.account.farmer.fetch(humanFarmerVar);\n        if (farmersHuman != null) {\n          console.log('Farmer ');\n          console.log(farmersHuman);\n          setStakedTokens(farmersHuman.gemsStaked!.toNumber());\n          setRespectEarned(farmersHuman.lpPoints.lpAccrued.toNumber());\n          setMultiplierLevel(farmersHuman.lpPoints.lpLevel.toNumber());\n          setFarmerHuman(farmersHuman);\n        }\n      } catch (error) {\n        setStakedTokens(0);\n        setRespectEarned(0);\n        setMultiplierLevel(0);\n        setFarmerHuman(null);\n      }\n      \n      try {\n        const [humanPetsFarmerVar] = await farmerPDA(\n          HUMANPETS_FARM_ID,\n          wallet.publicKey!\n        );\n        const farmersHumanPets:any = await stakeProgram.account.farmer.fetch(humanPetsFarmerVar);\n        if (farmersHumanPets != null) {\n          console.log('Farmer ');\n          console.log(farmersHumanPets);\n          setStakedTokens(farmersHumanPets.gemsStaked!.toNumber());\n          setRespectEarned(farmersHumanPets.lpPoints.lpAccrued.toNumber());\n          setMultiplierLevel(farmersHumanPets.lpPoints.lpLevel.toNumber());\n          setFarmerHumanPet(farmersHumanPets);\n        }\n      } catch (error) {\n        setStakedTokens(0);\n        setRespectEarned(0);\n        setMultiplierLevel(0);\n        setFarmerHumanPet(null);\n      }\n\n      try {\n        const [cyborgFarmerVar] = await farmerPDA(\n          CYBORG_FARM_ID,\n          wallet.publicKey!\n        );\n        const farmersCyborg:any = await stakeProgram.account.farmer.fetch(cyborgFarmerVar);\n        if (farmersCyborg != null) {\n          console.log('Farmer ');\n          console.log(farmersCyborg);\n          setStakedTokens(farmersCyborg.gemsStaked!.toNumber());\n          setRespectEarned(farmersCyborg.lpPoints.lpAccrued.toNumber());\n          setMultiplierLevel(farmersCyborg.lpPoints.lpLevel.toNumber());\n          setFarmerCyborg(farmersCyborg);\n        }\n      } catch (error) {\n        setStakedTokens(0);\n        setRespectEarned(0);\n        setMultiplierLevel(0);\n        setFarmerCyborg(null);\n      }\n      \n      try {\n        const [cyborgPetFarmerVar] = await farmerPDA(\n          CYBORGPET_FARM_ID,\n          wallet.publicKey!\n        );\n        const farmersCyborgPets:any = await stakeProgram.account.farmer.fetch(cyborgPetFarmerVar);\n        if (farmersCyborgPets != null) {\n          console.log('Farmer ');\n          console.log(farmersCyborgPets);\n          setStakedTokens(farmersCyborgPets.gemsStaked!.toNumber());\n          setRespectEarned(farmersCyborgPets.lpPoints.lpAccrued.toNumber());\n          setMultiplierLevel(farmersCyborgPets.lpPoints.lpLevel.toNumber());\n          setFarmerCyborgPet(farmersCyborgPets);\n        }\n      } catch (error) {\n        setStakedTokens(0);\n        setRespectEarned(0);\n        setMultiplierLevel(0);\n        setFarmerCyborgPet(null);\n      }\n\n      try {\n        const [basementFarmerVar] = await farmerPDA(\n          BASEMENT_FARM_ID,\n          wallet.publicKey!\n        );\n        const farmersBasement:any = await stakeProgram.account.farmer.fetch(basementFarmerVar);\n        if (farmersBasement != null) {\n          console.log('Farmer ');\n          console.log(farmersBasement);\n          setStakedTokens(farmersBasement.gemsStaked!.toNumber());\n          setRespectEarned(farmersBasement.lpPoints.lpAccrued.toNumber());\n          setMultiplierLevel(farmersBasement.lpPoints.lpLevel.toNumber());\n          setFarmerBasement(farmersBasement);\n        }\n      } catch (error) {\n        setStakedTokens(0);\n        setRespectEarned(0);\n        setMultiplierLevel(0);\n        setFarmerBasement(null);\n      }\n    }\n  }\n\n  const getFarms = async () => {\n    if(wallet && wallet.connected) {\n      const stakeProgram = await getStakeProgram(wallet);\n      try {\n        const humanFarmVar:any = await stakeProgram.account.farm.fetch(HUMANS_FARM_ID);\n        // console.log('Humans Farm');\n        // console.log(humanFarmVar);\n        setHumanFarm(humanFarmVar);\n      } catch (error) {\n        setHumanFarm(null);\n      }\n      try {\n        const humanPetsFarmVar:any = await stakeProgram.account.farm.fetch(HUMANPETS_FARM_ID);\n        // console.log('Human Pets Farm ');\n        // console.log(humanPetsFarmVar);\n        setHumanPetsFarm(humanPetsFarmVar);\n      } catch (error) {\n        setHumanPetsFarm(null);\n      }\n      try {\n        const cyborgFarmVar:any = await stakeProgram.account.farm.fetch(CYBORG_FARM_ID);\n        // console.log('Cyborgs Farm ');\n        // console.log(cyborgFarmVar);\n        setCyborgFarm(cyborgFarmVar);\n      } catch (error) {\n        setCyborgFarm(null);\n      }\n      try {\n        const cyborgPetFarmVar:any = await stakeProgram.account.farm.fetch(CYBORGPET_FARM_ID);\n        // console.log('Cyborg Pets Farm ');\n        // console.log(cyborgPetFarmVar);\n        setCyborgPetFarm(cyborgPetFarmVar);\n      } catch (error) {\n        setCyborgPetFarm(null);\n      }\n    }\n  }\n\n  const getNFTs = async () => {\n    // const connectionMetaplex = new Connection(\n    //   \"https://api.metaplex.solana.com\",\n    //   \"confirmed\"\n    // );\n    // const metadata:any = Metadata;\n    // // const walletAddress = \"6vRx1iVZo3xfrBHdpvuwArL2jucVj9j9nLpd2VUTTGMG\"\n    // const nftsmetadata = await metadata.findDataByOwner(connectionMetaplex, wallet.publicKey?.toBase58());\n    // console.log(nftsmetadata);\n    // const connection = new Connection(clusterApiUrl(\"devnet\"));\n    // const wallet = anchor.web3.Keypair.generate();\n\n    // const metaplex = Metaplex.make(connection).use(keypairIdentity(wallet));\n    // const myNfts = await metaplex.nfts().findAllByOwner(wallet.publicKey);\n    // console.log(myNfts);\n    // const nftsmetadata = await Metadata.findDataByOwner(props.connection, wallet.publicKey);\n    // console.log(nftsmetadata)\n    setCollectionId(COLLECTION_ID);\n    if (wallet && wallet.connected && !gotNfts) {\n      const connection = new Connection(clusterApiUrl(\"devnet\"));\n      let ata = await getAssociatedTokenAddress(\n        REWARD_MINT_GLITCH, // mint\n        wallet?.publicKey! // owner\n      );\n  \n      let tokenAmount = await connection.getTokenAccountBalance(ata);\n      setGlitchTokenVal(parseInt(tokenAmount.value.amount));\n      setAlphaTokenVal(parseInt(tokenAmount.value.amount));\n      console.log(`amount: ${tokenAmount.value.amount}`);\n      console.log(`decimals: ${tokenAmount.value.decimals}`);\n      const metaplex = Metaplex.make(connection);\n      const allNfts = await metaplex\n                          .nfts()\n                          .findAllByOwner({ owner: wallet?.publicKey! })\n                          .run();\n      let temp_nfts:any = [];\n      console.log(allNfts);\n      for (let index = 0; index < allNfts.length; index++) {\n        const nft:any = allNfts[index];\n        var creators = nft.creators;\n        var is_ours = false;\n        // console.log(nft.updateAuthorityAddress.toBase58(), nft.name);\n        if (nft.updateAuthorityAddress.toBase58() == \"abSzV5zXTKCbkjzN2hzrg2BPTbkYAQ7tt4jQPett2jX\") {\n          is_ours = true;\n          for (let iindex = 0; iindex < creators.length; iindex++) {\n            const element = creators[iindex];\n            if (element.share == 0) {\n              // setCollectionId(element.address);\n            }\n          }\n        }\n        if (is_ours) {\n          var xhr = new XMLHttpRequest();\n          xhr.addEventListener(\"readystatechange\", function() {\n            if(this.readyState === 4) {\n              // console.log(this.responseText);\n              var attributes = JSON.parse(this.responseText).attributes;\n              var is_human;\n              var is_cyborg;\n              var is_pet;\n              var trait_type;\n              for (let index = 0; index < attributes.length; index++) {\n                const element = attributes[index];\n                if (element.trait_type == 'BaseBody' && element.value == 'Human') {\n                  is_human = true;\n                }\n                else if (element.trait_type == 'BaseBody' && element.value == 'Cyborg') {\n                  is_cyborg = true;\n                }\n                if (element.trait_type == 'Pets' && element.value && element.value.length > 0) {\n                  is_pet = true;\n                }\n              }\n              if (is_human && is_pet) {\n                trait_type = 'Human Pet';\n              }\n              else if (is_cyborg && !is_pet) {\n                trait_type = 'Human';\n              }\n              else if (is_cyborg && is_pet) {\n                trait_type = 'Cyborg Pet';\n              }\n              else if (is_cyborg && !is_pet) {\n                trait_type = 'Cyborg';\n              }\n              var obj:any = {\n                id:temp_nfts.length,\n                name: nft.name,\n                link: JSON.parse(this.responseText).image,\n                mint: nft.mintAddress,\n                updateAuthority: nft.updateAuthority,\n                creator: nft.creators[0].address,\n                trait_type: trait_type\n              }\n              temp_nfts.push(obj);\n              setNFts(temp_nfts!);\n              // console.log(allNfts);\n            }\n          });\n          xhr.open(\"GET\", nft.uri);\n          xhr.send();\n        }\n      }\n      // console.log(temp_nfts);\n      setGotNfts(true);\n    }\n  }\n\n  // Farmer should call this\n  const initFixedFarmerInst = async (id:any,stake_instructions:any, stakeProgram:any) => {\n    let farm_id:any;\n    if (id == 1) {\n      farm_id = HUMANS_FARM_ID;\n    }\n    else if (id == 4) {\n      farm_id = CYBORGPET_FARM_ID;\n    }\n    else if (id == 5) {\n      farm_id = BASEMENT_FARM_ID;\n    }\n    if (id == 1) {\n      const [farmerPda] = await farmerPDA(\n        farm_id,\n        wallet.publicKey!\n      );\n      const farms:any =\n        await stakeProgram.account.farm.fetch(farm_id);\n      console.log('farm with ' + farm_id.toBase58());\n      const [farmerVaultPda] = await farmerVaultPDA(\n        farms.bank,\n        wallet.publicKey!\n      );\n      stake_instructions.push(stakeProgram.instruction.initFixedFarmer(\n        {\n          accounts: {\n            farm: farm_id,\n            farmer: farmerPda,\n            identity: wallet.publicKey,\n            bank: farms.bank,\n            vault: farmerVaultPda,\n            gemBank: GEM_BANK_PROGRAM_ID,\n            payer: wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          }\n        }\n      ));\n      return stake_instructions;\n    }\n    else if (id == 2) {\n      const [farmerPda] = await farmerPDA(\n        FARM_ID,\n        wallet.publicKey!\n      );\n      const farms:any =\n        await stakeProgram.account.farm.fetch(FARM_ID);\n      console.log('farm with ' + FARM_ID.toBase58());\n      const [farmerVaultPda] = await farmerVaultPDA(\n        farms.bank,\n        wallet.publicKey!\n      );\n      stake_instructions.push(stakeProgram.instruction.initFixedFarmer(\n        {\n          accounts: {\n            farm: FARM_ID,\n            farmer: farmerPda,\n            identity: wallet.publicKey,\n            bank: farms.bank,\n            vault: farmerVaultPda,\n            gemBank: GEM_BANK_PROGRAM_ID,\n            payer: wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          }\n        }\n      ));\n      return stake_instructions;\n    }\n  }\n\n  //Farmer should call this\n  const initFixedFarmerAlpha = async (id:any,stake_instructions:any, stakeProgram:any) => {\n    let farm_id:any;\n    if (id == 1) {\n      farm_id = HUMANS_FARM_ID;\n    }\n    else if (id == 2) {\n      farm_id = HUMANPETS_FARM_ID;\n    }\n    else if (id == 3) {\n      farm_id = CYBORG_FARM_ID;\n    }\n    else if (id == 4) {\n      farm_id = CYBORGPET_FARM_ID;\n    }\n    const [farmerPda] = await farmerPDA(\n      farm_id,\n      wallet.publicKey!\n    );\n    const farms:any =\n      await stakeProgram.account.farm.fetch(farm_id);\n    console.log('farm with ' + farm_id.toBase58());\n    const [farmerVaultPda] = await farmerVaultPDA(\n      farms.bank,\n      wallet.publicKey!\n    );\n    stake_instructions.push(stakeProgram.instruction.initFarmerAlpha(\n      {\n        accounts: {\n          farm: farm_id,\n          farmer: farmerPda,\n          identity: wallet.publicKey,\n          bank: farms.bank,\n          vault: farmerVaultPda,\n          gemBank: GEM_BANK_PROGRAM_ID,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        }\n      }\n    ));\n    return stake_instructions;\n  }\n\n  // Farmer should call this\n  const refreshFarmers = async () => {\n    const stakeProgram = await getStakeProgram(wallet);\n    const farmers = await stakeProgram.account.farmer.all();\n    console.log(farmers);\n    try {\n\n      const [farmerPda, farmerBump] = await farmerPDA(\n        FARM_ID,\n        wallet.publicKey!\n      );\n      const farms:any = await stakeProgram.account.farm.fetch(FARM_ID);\n      console.log('farm with ' + FARM_ID.toBase58());\n      const wallet_create = await stakeProgram.rpc.refreshFarmerAlpha(farmerBump,\n        {\n          accounts: {\n            farm: FARM_ID,\n            farmer: farmerPda,\n            identity: wallet.publicKey\n          }\n        }\n      );\n      getFarmers();\n      console.log('refresh farmer signature : ' + wallet_create);\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  }\n\n  // Farmer should call this\n  const refreshFarmerSigned = async () => {\n    const stakeProgram = await getStakeProgram(wallet);\n    const farmers = await stakeProgram.account.farmer.all();\n    console.log(farmers);\n    try {\n      const [farmerPda, farmerBump] = await farmerPDA(\n        FARM_ID,\n        wallet.publicKey!\n      );\n      const farms:any =\n        await stakeProgram.account.farm.fetch(FARM_ID);\n      console.log('farm with ' + FARM_ID.toBase58());\n      const wallet_create = await stakeProgram.rpc.refreshFarmerSignedAlpha(farmerBump,true,\n        {\n          accounts: {\n            farm: FARM_ID,\n            farmer: farmerPda,\n            identity: wallet.publicKey\n          }\n        }\n      );\n      getFarmers();\n      console.log('refresh farmer signed signature : ' + wallet_create);\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  }\n\n  // Farmer should call this\n  const initProbableFarmerInst = async (id:any,stake_instructions:any, stakeProgram:any) => {\n    let farm_id:any;\n    if (id == 2) {\n      farm_id = HUMANPETS_FARM_ID;\n    }\n    else if (id == 3) {\n      farm_id = CYBORG_FARM_ID;\n    }\n    // console.log(farmers);\n    try {\n      const [farmerPda] = await farmerPDA(\n        farm_id,\n        wallet.publicKey!\n      );\n      const farms:any =\n        await stakeProgram.account.farm.fetch(farm_id);\n      console.log('farm with ' + farm_id.toBase58());\n      const [farmerVaultPda] = await farmerVaultPDA(\n        farms.bank,\n        wallet.publicKey!\n      );\n      // console.log(JSON.parse(farms).bank);\n      stake_instructions.push(await stakeProgram.rpc.initProbableFarmer(\n        {\n          accounts: {\n            farm: farm_id,\n            farmer: farmerPda,\n            identity: wallet.publicKey,\n            bank: farms.bank,\n            vault: farmerVaultPda,\n            gemBank: GEM_BANK_PROGRAM_ID,\n            payer: wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          }\n        }\n      ));\n      return stake_instructions;\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n      return stake_instructions;\n    }\n  }\n\n  // Farmer should call this\n\n  // Farmer should call this\n\n  // Farm Manager should call this\n  const addRaritiesToBank = async () => {\n    if (nftMint && nftMint.length > 0) {\n      const nft_mint = new PublicKey(nftMint);\n      try {\n        const stakeProgram = await getStakeProgram(wallet);\n        const farmers = await stakeProgram.account.farmer.all();\n        console.log(farmers);\n        try {\n          const [farmerPda, farmerBump] = await farmerPDA(\n            FARM_ID,\n            wallet.publicKey!\n          );\n          let nft;\n          if (stakedNft) {\n            nft = stakedNft;\n          }\n          else {\n            nft = nfts[0];\n          }\n          const [farmAuth, farmAuthBump] = await findFarmAuthorityPDA(FARM_ID);\n          const farms:any = await stakeProgram.account.farm.fetch(FARM_ID);\n          console.log('farm with ' + FARM_ID.toBase58());\n          const rarityConfig: RarityConfig = {\n            mint: nft_mint,\n            rarityPoints: new BN(1)\n          }\n          const rarityConfigs = [rarityConfig];\n          const remainingAccounts = [];\n          const [gemRarity] = await gemBoxRarityPda(farms.bank, nft_mint);\n          //add mint\n          remainingAccounts.push({\n            pubkey: nft_mint,\n            isWritable: false,\n            isSigner: false,\n          });\n          //add rarity pda\n          remainingAccounts.push({\n            pubkey: gemRarity,\n            isWritable: true,\n            isSigner: false,\n          });\n          const wallet_create = await stakeProgram.rpc.addRaritiesToBank(farmAuthBump,rarityConfigs,\n            {\n              accounts: {\n                farm: FARM_ID,\n                farmManager: farms.farmManager,\n                farmAuthority: farmAuth,\n                bank: farms.bank,\n                gemBank: GEM_BANK_PROGRAM_ID,\n                farmer: farmerPda,\n                systemProgram: SystemProgram.programId\n              },\n              remainingAccounts\n            }\n          );\n          getFarmers();\n          setAlertState({\n            open: true,\n            message: \"Rarities has been added to the NFT\",\n            severity: \"success\",\n          });\n          console.log('add rarities to bank signature : ' + wallet_create);\n        } catch (error) {\n          console.log(\"Transaction error: \", error);\n        }\n      } catch (error) {\n        setAlertState({\n          open: true,\n          message: \"NFT Mint is not a valid Public key\",\n          severity: \"error\",\n        });\n      }\n    }\n    else {\n      setAlertState({\n        open: true,\n        message: \"NFT Mint is empty\",\n        severity: \"error\",\n      });\n    }\n  }\n\n  // Complete Staking NFT\n  const completeStake = async () => {\n    // let tokens = await getStakedNfts();\n    var add_init_human = true;\n    var add_init_human_pets = true;\n    var add_init_cyborg = true;\n    var add_init_cyborg_pets = true;\n    var add_init_basement = true;\n    if (farmerHuman! != null) {\n      add_init_human = false;\n    }\n    else if (farmerHumanPet! != null) {\n      add_init_human_pets = false;\n    }\n    else if (farmerCyborg! != null) {\n      add_init_cyborg = false;\n    }\n    else if (farmerCyborgPet! != null) {\n      add_init_cyborg_pets = false;\n    }\n    else if (farmerBasement! != null) {\n      add_init_basement = false;\n    }\n    if (stakedNft) {\n      let farm_id:any;\n        if (stakedNft.trait_type == 'Human') {\n          farm_id = HUMANS_FARM_ID;\n        }\n        else if (stakedNft.trait_type == 'Human Pet') {\n          farm_id = HUMANPETS_FARM_ID;\n        }\n        else if (stakedNft.trait_type == 'Cyborg') {\n          farm_id = CYBORG_FARM_ID;\n        }\n        else if (stakedNft.trait_type == 'Cyborg Pet') {\n          farm_id = CYBORGPET_FARM_ID;\n        }\n        let stake_instructions:any = [];\n        const stakeProgram:any = await getStakeProgram(wallet);\n        const bankProgram = await getBankProgram(wallet);\n        // let tokens = await getTokensByOwner(wallet.publicKey!);\n        const farmers = await stakeProgram.account.farmer.all();\n        if (add_init_human && stakedNft.trait_type == 'Human') {\n          stake_instructions = await initFixedFarmerAlpha(1,stake_instructions,stakeProgram);\n        }\n        else if (add_init_basement && stakedNft.trait_type == 'Human Pet') {\n          stake_instructions = await initFixedFarmerAlpha(2,stake_instructions,stakeProgram);\n        }\n        else if (add_init_cyborg && stakedNft.trait_type == 'Cyborg') {\n          stake_instructions = await initFixedFarmerAlpha(3,stake_instructions,stakeProgram);\n        }\n        else if (add_init_human_pets && stakedNft.trait_type == 'Cyborg Pet') {\n          stake_instructions = await initFixedFarmerAlpha(4,stake_instructions,stakeProgram);\n        }\n        const [farmerPda, farmerBump] = await farmerPDA(\n          farm_id,\n          wallet.publicKey!\n        );\n        const farms:any = await stakeProgram.account.farm.fetch(farm_id);\n        const [farmerVaultPda, farmerVaultBump] = await farmerVaultPDA(\n          farms.bank,\n          wallet.publicKey!\n        );\n        let nft;\n        if (stakedNft) {\n          nft = stakedNft;\n        }\n        else {\n          nft = nfts[0];\n        }\n        const vaults = await bankProgram.account.vault.all();\n        // console.log(vaults[0].account.authoritySeed.toBase58());\n        const [gemBoxPdaVal] = await gemBoxPda(\n          farmerVaultPda,\n          new PublicKey(nft.mint)\n        );\n        const [gemDepositBoxPdaVal] = await gemDepositBoxPda(\n          farmerVaultPda,\n          new PublicKey(nft.mint)\n        );\n        const [gemBoxRarityPdaVal, gemBoxrarityBump] = await gemBoxRarityPda(\n          farms.bank,\n          new PublicKey(nft.mint)\n        );\n        const [vaultAuthorityPdaVal, vaultAuthorityBump] = await vaultAuthorityPda(\n          farmerVaultPda\n        );\n        const gem_mint = new PublicKey(nft.mint);\n        // const address_to_whitelist = new PublicKey(collectionId);\n        // const [whitelistProofPdaVal] = await whitelistProofPda(farms.bank,address_to_whitelist);\n        const [mintWhitelistProofPdaVal] = await whitelistProofPda(farms.bank,new PublicKey(nft.mint));\n        const [creatorWhitelistProofPdaVal] = await whitelistProofPda(farms.bank,new PublicKey(nft.creator));\n        const gem_source_old = await findAssociatedTokenAddress(wallet.publicKey!,new PublicKey(nft.mint));\n        const gem_source_obj = await props.connection.getParsedTokenAccountsByOwner(wallet.publicKey!, {\n          mint: new PublicKey(nft.mint),\n        });\n        const gem_source = gem_source_obj.value[0].pubkey;\n        const [gem_metadata] = await tokenMetadataPda(gem_mint);\n        const remainingAccounts = [];\n        if (mintWhitelistProofPdaVal)\n        remainingAccounts.push({\n          pubkey: mintWhitelistProofPdaVal,\n          isWritable: false,\n          isSigner: false,\n        });\n        if (gem_metadata)\n        remainingAccounts.push({\n          pubkey: gem_metadata,\n          isWritable: false,\n          isSigner: false,\n        });\n        console.log(nft.creator);\n        // console.log(whitelistProofPdaVal.toBase58());\n        if (creatorWhitelistProofPdaVal) {\n          remainingAccounts.push({\n            pubkey: creatorWhitelistProofPdaVal,\n            isWritable: false,\n            isSigner: false,\n          });\n        }\n        console.log(stake_instructions);\n        stake_instructions.push(await stakeProgram.instruction.flashDepositAlpha(farmerBump, vaultAuthorityBump,gemBoxrarityBump, new BN(1), \n          {\n            accounts: {\n              farm: farm_id,\n              farmAuthority: farms.farmAuthority,\n              farmer: farmerPda,\n              identity: wallet.publicKey,\n              bank: farms.bank,\n              vault: farmerVaultPda,\n              vaultAuthority: vaultAuthorityPdaVal,\n              gemBox: gemBoxPdaVal,\n              gemDepositReceipt: gemDepositBoxPdaVal,\n              gemSource: gem_source,\n              gemMint: gem_mint,\n              gemRarity: gemBoxRarityPdaVal,\n              tokenProgram: TOKEN_PROGRAM_ID,\n              systemProgram: SystemProgram.programId,\n              rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n              gemBank: GEM_BANK_PROGRAM_ID\n            },\n            remainingAccounts\n          }\n        ));\n        const [farmAuth, farmAuthBump] = await findFarmAuthorityPDA(farm_id);\n        const address_to_whitelist = new PublicKey(collectionId);\n        const [whitelistProofPdaVal] = await whitelistProofPda(farms.bank,address_to_whitelist);\n        stake_instructions.push(stakeProgram.instruction.stakeAlpha(farmAuthBump, farmerBump, \n          {\n            accounts: {\n              farm: farm_id,\n              farmAuthority: farms.farmAuthority,\n              farmer: farmerPda,\n              identity: wallet.publicKey,\n              bank: farms.bank,\n              vault: farmerVaultPda,\n              gemBank: GEM_BANK_PROGRAM_ID,\n              systemProgram: SystemProgram.programId,\n            }\n          }\n        ));\n        let tr = new Transaction();\n        tr.add(stake_instructions);\n        const complete_stake = await sendTransactions(\n          props.connection,\n          wallet,\n          [stake_instructions],\n          [[]]\n        )\n        console.log('complete stake signature ',complete_stake);\n        nftStakeStepCount = nftStakeStepCount + 1;\n        setNftStakeStep(nftStakeStepCount);\n        var arr = stakedNfts;\n        arr.push(stakedNft);\n        setStakedNfts(arr);\n        // setStakedTokens(stakedNfts.length * 100);\n        // setRespectEarned(stakedNfts.length * 100);\n        // setMultiplierLevel(stakedNfts.length);\n    }\n    else {\n      setAlertState({\n        open: true,\n        message: \"Select an NFT to stake\",\n        severity: \"error\",\n      });\n    }\n  }\n\n  // Farmer should call this\n\n  // Farm Manager should call this\n\n  // Farm Manager should call this\n\n  // Farmer should call this\n\n  // Farmer should call this\n  const UnStakeNft = async () => {\n    const stakeProgram = await getStakeProgram(wallet);\n    const [farmerPda, farmerBump] = await farmerPDA(\n      FARM_ID,\n      wallet.publicKey!\n    );\n    const farmers = await stakeProgram.account.farmer.all();\n    try {\n      const [farmAuth, farmAuthBump] = await findFarmAuthorityPDA(FARM_ID);\n      const farms:any = await stakeProgram.account.farm.fetch(FARM_ID);\n      let nft;\n      if (stakedNft) {\n        nft = stakedNft;\n      }\n      else {\n        nft = nfts[0];\n      }\n      const [farmerPda, farmerBump] = await farmerPDA(\n        FARM_ID,\n        wallet.publicKey!\n      );\n      const [farmerVaultPda, farmerVaultBump] = await farmerVaultPDA(\n        farms.bank,\n        wallet.publicKey!\n      );\n      const [farmTreasury, farmTreasuryBump] = await findFarmTreasuryPDA(\n        FARM_ID\n      );\n      const [farmTreasuryToken, farmTreasuryTokenBump] = await findFarmTreasuryTokenPDA(\n        FARM_ID,\n        REWARD_MINT\n      );\n      const wallet_create = await stakeProgram.rpc.unstakeAlpha(farmAuthBump, farmTreasuryTokenBump, farmerBump, false,\n        {\n          accounts: {\n            farm: FARM_ID,\n            farmAuthority: farms.farmAuthority,\n            farmTreasuryToken: farmTreasuryToken,\n            farmer: farmerPda,\n            identity: wallet.publicKey,\n            bank: farms.bank,\n            vault: farmerVaultPda,\n            gemBank: GEM_BANK_PROGRAM_ID,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: SystemProgram.programId,\n          }\n        }\n      );\n      console.log('unstake signature : ' + wallet_create);\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  }\n\n  const showTeamInfoHover = async (id: any) => {\n    setShowTeamInfo(true);\n    setTeamInfoMember(id);\n  };\n\n  const closeMenu = async (id: any) => {\n    if (id && id === \"VAULT\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setClassNameState(\"main-vault-room-door\");\n    } else if (id && id === \"TEAM\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setShowTeamRoom(true);\n      setClassNameState(\"main-team-room-door\");\n    } else if (id && id === \"ALPHA\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setShowAlphaRoom(true);\n      setClassNameState(\"main-alpha-room-door\");\n    } else if (id && id === \"STAKE\") {\n      setShowMobileDoor(true);\n      setMobileDoor(id);\n      setMenuOpen(false);\n      setShowStakeRoom(true);\n      setClassNameState(\"main-stake-room-door\");\n    } else {\n      setMenuOpen(false);\n    }\n  };\n\n  const closeAlphaRoom = async () => {\n    var n = \"\";\n    if (mobileDoor === \"VAULT\") {\n      n = \"main-vault-room-door\";\n    } else if (mobileDoor === \"ALPHA\") {\n      n = \"main-alpha-room-door\";\n    } else if (mobileDoor === \"TEAM\") {\n      n = \"main-team-room-door\";\n    } else if (mobileDoor === \"STAKE\") {\n      n = \"main-stake-room-door\";\n    }\n    if (showMobileDoor) {\n      setClassNameState(n);\n      setLogoAlphaLoading(false);\n      setShowAlphaRoom(false);\n      setShowStakeRoom(false);\n      setShowTeamRoom(false);\n      setShowMobileDoor(true);\n    } else {\n      setClassNameState(\"main-bg-after-door-open\");\n      setLogoAlphaLoading(false);\n      setShowAlphaRoom(false);\n      setShowStakeRoom(false);\n      setShowTeamRoom(false);\n    }\n  };\n\n\n\n  const createWhitelistConfig = async () => {\n    try {\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      // let config_t:any = Borsh.struct(JSON.stringify(config));\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n  const updateWhitelistConfig = async () => {\n    try {\n      const [whitelist_config_pda, bump] = await PublicKey.findProgramAddress(\n        [Buffer.from(pdaWhitelistSeed), wallet.publicKey!.toBuffer()],\n        MAGIC_HAT_PROGRAM_V2_ID\n      );\n      // return { whitelistConfigAccounts };\n    } catch (error) {\n      console.log(\"Transaction error: \", error);\n    }\n  };\n\n\n\n\n\n  let currentWltype: String;\n\n  const getTimeToMInt = async () => {\n    const date = new Date();\n    const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n    if (time >= PUBLIC_TIME) {\n      setCurrentWl(\"PUBLIC\");\n      currentWltype = \"PUBLIC\";\n    } else if (time >= WL_TIME) {\n      setCurrentWl(\"WL\");\n      currentWltype = \"WL\";\n    } else if (time >= GOG_TIME) {\n      setCurrentWl(\"GOG + OG\");\n      currentWltype = \"GOG + OG\";\n    } else if (time >= COMMUNITY_TIME) {\n      setCurrentWl(\"COMMUNITY\");\n      currentWltype = \"COMMUNITY\";\n    }\n    if (currentWltype == \"PUBLIC\") {\n      return \"\";\n    } else {\n      if (currentWltype == \"COMMUNITY\") {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        var delta = Math.abs(time - GOG_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"GOG + OG\");\n          currentWltype = \"GOG + OG\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      } else if (currentWltype == \"GOG + OG\") {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        delta = Math.abs(time - WL_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"WL\");\n          currentWltype = \"WL\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      } else if (currentWltype == \"WL\") {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        delta = Math.abs(time - PUBLIC_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"PUBLIC\");\n          currentWltype = \"PUBLIC\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      } else if (currentWl == \"PUBLIC\") {\n        setTime(\"\");\n      } else {\n        const date = new Date();\n        const time: any = parseInt((date.getTime() / 1000).toFixed(0));\n        delta = Math.abs(time - COMMUNITY_TIME);\n        if (delta <= 0) {\n          setCurrentWl(\"COMMUNITY\");\n          currentWltype = \"COMMUNITY\";\n        }\n        let days: any = Math.floor(delta / 86400);\n        delta -= days * 86400;\n        let hours: any = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n        let minutes: any = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n        let seconds: any = delta % 60;\n        hours = Math.abs(hours);\n        if (days < 10) {\n          days = \"0\" + days;\n        }\n        if (hours < 10) {\n          hours = \"0\" + hours;\n        }\n        minutes = Math.abs(minutes);\n        if (minutes < 10) {\n          minutes = \"0\" + minutes;\n        }\n        seconds = Math.abs(seconds);\n        if (seconds < 10) {\n          seconds = \"0\" + seconds;\n        }\n        setTime(hours + \":\" + minutes + \":\" + seconds);\n      }\n    }\n  };\n\n\n\n  const closeForm = async () => {\n    setClassNameState(\"main-bg-after-door-open\");\n    setShowAlphaRoom(false);\n    setShowTeamRoom(false);\n    setShowStakeRoom(false);\n    setShowMobileDoor(false);\n  };\n\n  const handleMobileHome = async () => {\n    if (showAlphaRoom || showTeamRoom || showStakeRoom) {\n      closeAlphaRoom();\n    } else {\n      closeForm();\n    }\n  };\n\n  const openMenu = async () => {\n    setMenuOpen(true);\n  };\n\n  const openStakeRoom = async (id:any) => {\n    setCurrentStakeRoom(id);\n    setShowStakeCity(true);\n  };\n\n  const closeStakeCity = async () => {\n    setShowStakeCity(false);\n    setShowStaking(false);\n  };\n\n  const closeFixedStaking =async () => {\n    setClassNameState(\"alphazen-room\");\n    setLogoAlphaLoading(false);\n    setShowAlphaRoom(false);\n    setShowTeamRoom(false);\n    setShowStakeRoom(true);\n    setShowMobileDoor(false);\n    setShowFixedStakingRoom(false);\n  }\n\n  const closeTokenSwapping =async () => {\n    setClassNameState(\"alphazen-room\");\n    setLogoAlphaLoading(false);\n    setShowAlphaRoom(false);\n    setShowTeamRoom(false);\n    setShowStakeRoom(true);\n    setShowMobileDoor(false);\n    setShowFixedStakingRoom(false);\n    setShowTokenSwapping(false);\n  }\n\n  const openFixedStaking = async (id:any) => {\n    console.log('1');\n    setClassNameState(\"main-bg-after-door-open black-bg\");\n    setLogoAlphaLoading(true);\n    setTimeout(function () {\n    setLogoAlphaLoading(false);\n      setClassNameState(\"fixed-staking-room\");\n      setShowTeamRoom(false);\n      setShowAlphaRoom(false);\n      setShowStakeRoom(false);\n      setShowMobileDoor(false);\n      setShowFixedStakingRoom(true)\n    }, 600);\n  };\n\n  const openTokenSwapping =async (params:any) => {\n    setClassNameState(\"main-bg-after-door-open black-bg\");\n    setLogoAlphaLoading(true);\n    setTimeout(function () {\n    setLogoAlphaLoading(false);\n      setClassNameState(\"token-swapping-room\");\n      setShowTeamRoom(false);\n      setShowAlphaRoom(false);\n      setShowStakeRoom(false);\n      setShowMobileDoor(false);\n      setShowFixedStakingRoom(false);\n      setShowTokenSwapping(true);\n    }, 600);\n  }\n\n  const mintToCheckedFn =async (params:any) => {\n    const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n    let mint = new PublicKey('57vavPcanGNxm9WYVnWyDNiwofxGniQHmTTocAeco3dk');\n    let ata = await getAssociatedTokenAddress(\n      mint, // mint\n      wallet?.publicKey! // owner\n    );\n    let tx:any = new Transaction().add(\n      createMintToCheckedInstruction(\n        mint, // mint\n        ata, // receiver (sholud be a token account)\n        wallet?.publicKey!, // mint authority\n        1e15, // amount. if your decimals is 8, you mint 10^8 for 1 token.\n        8 // decimals\n        // [signer1, signer2 ...], // only multisig account will use\n      )\n    )\n    const sig_token = await sendTransaction(connection, wallet, tx.instructions, []);\n    console.log(sig_token);\n  }\n\n  const createToken = async (params:any) => {\n    const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n    const alice = anchor.web3.Keypair.generate();\n    const mint = anchor.web3.Keypair.generate();\n    const seed1 = Buffer.from(anchor.utils.bytes.utf8.encode(\"metadata\"));\n    const seed2 = Buffer.from(mpl.PROGRAM_ID.toBytes());\n    const seed3 = Buffer.from(mint.publicKey.toBytes());\n    const [metadataPDA, _bump] = anchor.web3.PublicKey.findProgramAddressSync([seed1, seed2, seed3], mpl.PROGRAM_ID);\n    const accounts:any = {\n        metadata: metadataPDA,\n        mint,\n        mintAuthority: wallet.publicKey,\n        payer: wallet.publicKey,\n        updateAuthority: wallet.publicKey,\n    }\n    const dataV2:any = {\n        name: \"Fake USD Token\",\n        symbol: \"FUD\",\n        uri: \"https://shdw-drive.genesysgo.net/ArP7jjhVZsp7vkzteU7mpKA1fyHRhv4ZBz6gR7MJ1JTC/metadata.json\",\n        // we don't need that\n        sellerFeeBasisPoints: 0,\n        creators: null,\n        collection: null,\n        uses: null\n    }  \n    const args:any =  {\n      updateMetadataAccountArgsV2: {\n          data: dataV2,\n          isMutable: true,\n          updateAuthority: wallet.publicKey,\n          primarySaleHappened: true\n      }\n    };\n    let ata = await getAssociatedTokenAddress(\n      mint.publicKey, // mint\n      wallet?.publicKey! // owner\n    );\n    console.log(`ATA: ${ata.toBase58()}`);\n    let tx:any = new Transaction().add(\n      // create mint account\n      SystemProgram.createAccount({\n        fromPubkey: wallet?.publicKey!,\n        newAccountPubkey: mint.publicKey,\n        space: MINT_SIZE,\n        lamports: await getMinimumBalanceForRentExemptMint(connection),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      // init mint account\n      createInitializeMintInstruction(\n        mint.publicKey, // mint pubkey\n        8, // decimals\n        wallet?.publicKey!, // mint authority\n        wallet?.publicKey! // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)\n      ),\n      createAssociatedTokenAccountInstruction(\n        wallet?.publicKey!, // payer\n        ata, // ata\n        wallet?.publicKey!, // owner\n        mint.publicKey // mint\n      ),\n      createMintToCheckedInstruction(\n        mint.publicKey, // mint\n        ata, // receiver (sholud be a token account)\n        wallet?.publicKey!, // mint authority\n        1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.\n        8 // decimals\n        // [signer1, signer2 ...], // only multisig account will use\n      )\n      // ,mpl.createUpdateMetadataAccountV2Instruction(accounts, args)\n    );\n    const sig_token = await sendTransaction(connection, wallet, tx.instructions, [mint]);\n    console.log(sig_token);\n    console.log(mint.publicKey.toBase58());\n    // const myKeypair = loadWalletKey(\"AndXYwDqSeoZHqk95TUC1pPdp93musGfCo1KztNFNBhd.json\");\n  }\n\n  const openAlphaRoom = async (key:string) => {\n    if (isMobile) {\n      if (mobileDoor === \"ALPHA\") {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setLogoAlphaLoading(false);\n          setClassNameState(\"alpha-room\");\n          setShowTeamRoom(false);\n          setShowAlphaRoom(true);\n          setShowStakeRoom(false);\n          setShowMobileDoor(false);\n        }, 600);\n      } \n      // else if (mobileDoor === \"TEAM\") {\n      //   setClassNameState(\"main-bg-after-door-open black-bg\");\n      //   setLogoAlphaLoading(true);\n      //   setTimeout(function () {\n      //     setLogoAlphaLoading(false);\n      //     setClassNameState(\"team-room\");\n      //     setShowTeamRoom(true);\n      //     setShowAlphaRoom(false);\n      //     setShowStakeRoom(false);\n      //     setShowMobileDoor(false);\n      //   }, 600);\n      // }\n      else if (mobileDoor === \"STAKE\") {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setLogoAlphaLoading(false);\n          setClassNameState(\"team-room\");\n          setShowTeamRoom(false);\n          setShowAlphaRoom(false);\n          setShowStakeRoom(true);\n          setShowMobileDoor(false);\n        }, 600);\n      }\n      else {\n        var arr = [\n          \"Patience is key\",\n          \"Shh...\",\n          \"Not yet, the time will come\",\n          \"Calm down man\",\n          \"It's locked, come back later.\",\n        ];\n        const k: number | undefined = Math.floor(Math.random() * 5);\n        setShowMessage(true);\n        setMessageText(arr[k as number]);\n        setTimeout(function () {\n          setShowMessage(false);\n          setMessageText(\"\");\n        }, 900);\n      }\n    } else {\n      if (key == 'alpha') {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setClassNameState(\"alpha-room\");\n          setLogoAlphaLoading(false);\n          setShowAlphaRoom(true);\n          setShowStakeRoom(false);\n          setShowMobileDoor(false);\n        }, 600);\n      }\n      // else if (key == 'team') {\n      //   setClassNameState(\"main-bg-after-door-open black-bg\");\n      //   setLogoAlphaLoading(true);\n      //   setTimeout(function () {\n      //     setClassNameState(\"team-room\");\n      //     setLogoAlphaLoading(false);\n      //     setShowAlphaRoom(false);\n      //     setShowTeamRoom(true);\n      //     setShowStakeRoom(false);\n      //     setShowMobileDoor(false);\n      //   }, 600);\n      // }\n      else if (key == 'stake') {\n        setClassNameState(\"main-bg-after-door-open black-bg\");\n        setLogoAlphaLoading(true);\n        setTimeout(function () {\n          setClassNameState(\"alphazen-room\");\n          setLogoAlphaLoading(false);\n          setShowAlphaRoom(false);\n          setShowTeamRoom(false);\n          setShowStakeRoom(true);\n          setShowMobileDoor(false);\n        }, 600);\n        setTimeout(function() {\n          if (roomOneInfoClass == \"stake-room-info-one\") {\n            setRoomOneInfoClass(\"stake-room-info-one flip\");\n          }\n          else {\n            setRoomOneInfoClass(\"stake-room-info-one\");\n          }\n          if (roomTwoInfoClass == \"stake-room-info-one\") {\n            setRoomTwoInfoClass(\"stake-room-info-one flip\");\n          }\n          else {\n            setRoomTwoInfoClass(\"stake-room-info-one\");\n          }\n          if (roomThreeInfoClass == \"stake-room-info-one\") {\n            setRoomThreeInfoClass(\"stake-room-info-one flip\");\n          }\n          else {\n            setRoomThreeInfoClass(\"stake-room-info-one\");\n          }\n          if (roomFourInfoClass == \"stake-room-info-one\") {\n            setRoomFourInfoClass(\"stake-room-info-one flip\");\n          }\n          else {\n            setRoomFourInfoClass(\"stake-room-info-one\");\n          }\n          if (roomFiveInfoClass == \"stake-room-info-one\") {\n            setRoomFiveInfoClass(\"stake-room-info-one flip\");\n          }\n          else {\n            setRoomFiveInfoClass(\"stake-room-info-one\");\n          }\n        },3000) \n      }\n      else {\n        var arr = [\n          \"Patience is key\",\n          \"Shh...\",\n          \"Not yet, the time will come\",\n          \"Calm down man\",\n          \"It's locked, come back later.\",\n        ];\n        const k: number | undefined = Math.floor(Math.random() * 5);\n        setShowMessage(true);\n        setMessageText(arr[k as number]);\n        setTimeout(function () {\n          setShowMessage(false);\n          setMessageText(\"\");\n        }, 900);\n      }\n    }\n  };\n\n  const hideTeamInfo = async () => {\n    setShowTeamInfo(false);\n    setTeamInfoMember(null);\n  };\n\n\n  const scrollStory = async () => {\n    var elem: HTMLElement | null = document.getElementById(\"alpha-scroll\");\n    elem!.scrollTop = elem!.scrollTop + 180;\n  };\n\n  const openFirstPhilAlphaRoom = async () => {\n    setShowFirstPhil(true);\n  };\n\n  const closeAlphaUpdates = async () => {\n    setShowFirstPhil(false);\n    setShowAlphaRoom(true);\n  };\n\n  const changeGlitchToken = async (val:any) => {\n    setGlitchTokenVal(val);\n    setAlphaTokenVal(val);\n  };\n\n  const swapFn =async (params:any) => {\n    const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n    let mint = new PublicKey('57vavPcanGNxm9WYVnWyDNiwofxGniQHmTTocAeco3dk');\n    let farm_manager = new PublicKey('UXX91ApKnrc1NyATPYqMJaDeJBQ3r9kSva1a4XTY3FD');\n    let ata = await getAssociatedTokenAddress(\n      mint, // mint\n      wallet?.publicKey! // owner\n    );\n    let tx:any = new Transaction().add(\n      createMintToCheckedInstruction(\n        mint, // mint\n        ata, // receiver (sholud be a token account)\n        wallet?.publicKey!, // mint authority\n        1e15, // amount. if your decimals is 8, you mint 10^8 for 1 token.\n        8 // decimals\n        // [signer1, signer2 ...], // only multisig account will use\n      )\n    )\n    const sig_token = await sendTransaction(connection, wallet, tx.instructions, []);\n    console.log(sig_token);\n  }\n\n  // const getFreeSol = async () => {\n  //   var data = JSON.stringify({\n  //     \"jsonrpc\": \"2.0\",\n  //     \"id\": \"eb5c5883-8d38-44cb-a7af-22ab62343a75\",\n  //     \"method\": \"requestAirdrop\",\n  //     \"params\": [\n  //       anchorWallet?.publicKey.toBase58(),\n  //       1000000000\n  //     ]\n  //   });\n\n  //   var xhr = new XMLHttpRequest();\n  //   xhr.addEventListener(\"readystatechange\", function() {\n  //     if(this.readyState === 4) {\n  //       setAlertState({\n  //         open: true,\n  //         message: '1 Sol transferred!',\n  //         severity: 'success',\n  //       });\n  //     }\n  //   });\n\n  //   xhr.open(\"POST\", \"https://api.devnet.solana.com/\");\n  //   xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  //   xhr.send(data);\n  // }\n\n  return (\n    <div id=\"main\" className={classNameState}>\n      <div id=\"wrapper\">\n        {isMobile && (\n          //  <CheeseburgerMenu isOpen={menuOpen} closeCallback={this.closeMenu.bind(this)}>\n          //   <MenuContent closeCallback={this.closeMenu.bind(this)} />\n          // </CheeseburgerMenu>\n          <div></div>\n        )}\n        {logoLoading && !logoAlphaLoading && (\n          <div className=\"logo-loader-parent\">\n            <img alt=\"Alpha-logo\" src={LogoWhite} className=\"pulse-animation\" />\n          </div>\n        )}\n        {!logoLoading &&\n          !showMobileDoor && \n          !logoAlphaLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div className=\"white-paper-div\">\n              <a\n                href=\"https://secret-alpha.gitbook.io/glitch/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                className=\"white-paper-anchor\"\n              >\n                {\" \"}\n              </a>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div\n              onClick={() => openAlphaRoom('stake')}\n              // onClick={() => refreshFarmer()}\n              // onClick={() => refreshFarmerSigned()}\n              className=\"stake-room-div\"\n            ></div>\n          )}\n        {!logoLoading && isMobile && !logoAlphaLoading && !menuOpen && (\n          <div className=\"hamburger-menu\">\n            <img alt=\"Menu\" onClick={openMenu} src={MobileMenu} />\n          </div>\n        )}\n        {!logoLoading && isMobile && !logoAlphaLoading && (\n          <div className=\"alpha-home-logo\" onClick={handleMobileHome}>\n            <img alt=\"Alpha-Logo-Cropped\" src={LogoWhiteCropped} />\n          </div>\n        )}\n        {!logoLoading &&\n          isMobile &&\n          !logoAlphaLoading &&\n          showTeamRoom &&\n          !showMobileDoor && (\n            <div className=\"team-room-header\" onClick={handleMobileHome}>\n              <h2>TEAM</h2>\n            </div>\n          )}\n        {!logoLoading && isMobile && showMobileDoor && !logoAlphaLoading && (\n          <div className=\"mobile-room-div\" onClick={() => openAlphaRoom('')}></div>\n        )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div\n              onClick={() => showToaster(5)}\n              className=\"vault-room-div\"\n            ></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showTeamRoom &&\n          !showStakeRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div\n              onClick={() => openAlphaRoom('alpha')}\n              className=\"alpha-room-div\"\n            ></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div onClick={() => openAlphaRoom('team')} className=\"team-room-div\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div onClick={closeForm} className=\"alpha-logo-div\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !showMobileDoor && (\n            <div className=\"hologram-div\">\n              {/* onClick={openUpdates} */}\n              <div className=\"smaller-holo-updates\">\n                {currentWl == \"\" && (\n                  <label className=\"typing-text\">Mint</label>\n                )}\n                {(\n                  // <div className=\"Top-connected red\">\n                  //   <WalletDialogButton className=\"Inside-Connect-btn\">\n                  //     Connect\n                  //   </WalletDialogButton>\n                  // </div>\n                  <div className=\"Top-connected green\">\n                    <button\n                      className={\n                        shouldMint ? \"Outside-Mint-btn\" : \"Outside-Mint-btn\"\n                      }\n                      // onClick={openUpdates}\n                    >\n                      Minted Out\n                    </button>\n                  </div>\n                )}\n                {/* {wallet.connected && currentWl != \"\" && (\n                  <div className=\"Top-connected green\">\n                    <button\n                      className={\n                        shouldMint ? \"Outside-Mint-btn\" : \"Outside-Mint-btn\"\n                      }\n                      onClick={openUpdates}\n                    >\n                      Mint\n                    </button>\n                  </div>\n                )} */}\n              </div>\n            </div>\n          )}\n          \n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !logoAlphaLoading &&\n          !isMobile && <div className=\"hologram-setup-div\"></div>}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Katana\"\n                src={KatanaImage}\n                // onClick={createWhitelistAccountMultiple}\n                onClick={() => showToaster(2)}\n                className=\"katana-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Pizza\"\n                src={PizzaImage}\n                onClick={() => showToaster(1)}\n                className=\"pizza-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div>\n              <img\n                alt=\"Sopha\"\n                onClick={updateWhitelistConfig}\n                src={Sopha}\n                className=\"sopha-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div>\n              <div\n                className=\"bean-bag-click\"\n                onClick={() => showToaster(4)}\n              ></div>\n              <img\n                alt=\"Bean-bag\"\n                src={Beanbag}\n                className=\"bean-bag-image\"\n              ></img>\n            </div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <video autoPlay={true} loop muted className=\"fan-spinning-image\">\n              <source\n                src={FanSpinning}\n                className=\"fan-spinning-image\"\n                type=\"video/mp4\"\n              ></source>\n              <source\n                src={FanSpinning}\n                className=\"fan-spinning-image\"\n                type=\"video/mp4\"\n              ></source>\n              Your browser does not support HTML5 video.\n            </video>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            // <div onClick={setCollection} className=\"light-flicker-image\"></div>\n            <div className=\"light-flicker-image\"></div>\n          )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !logoAlphaLoading &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <img\n              alt=\"Sider\"\n              src={SophaSider}\n              onClick={() =>setShowFarming(true)}\n              className=\"sopha-sider-image\"\n            ></img>\n          )}\n        {!logoLoading && showMessage && (\n          <div className=\"mesage-container\">\n            <label>{messageText}</label>\n          </div>\n        )}\n        {!logoLoading &&\n          !showAlphaRoom &&\n          !showStakeRoom &&\n          !showTeamRoom &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !logoAlphaLoading &&\n          !isMobile && (\n            <div className=\"social-media-links\">\n              <a\n                href=\"https://twitter.com/SecretAlphaLabs\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <img alt=\"Twitter\" className=\"social-icons\" src={Twitter} />\n              </a>\n              <a\n                href=\"https://discord.com/invite/SecretAlpha\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <img alt=\"Discord\" className=\"social-icons\" src={Discord} />\n              </a>\n            </div>\n          )}\n        {showAlphaRoom &&\n          !logoAlphaLoading &&\n          !logoLoading &&\n          !showMobileDoor &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div className=\"close-alpha-room\" onClick={closeAlphaRoom}>\n              <img alt=\"close\" src={CloseAlpha} />\n            </div>\n          )}\n        {showStakeRoom &&\n          !showStakeCity &&\n          !showStaking &&\n          !showStakeDashboard &&\n          !logoAlphaLoading &&\n          !logoLoading &&\n          !showMobileDoor &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div className=\"close-stake-room\" onClick={closeAlphaRoom}>\n              <img alt=\"close\" src={CloseAlpha} />\n            </div>\n          )}\n        {showTeamRoom &&\n          !logoAlphaLoading &&\n          !logoLoading &&\n          !showMobileDoor &&\n          !showFixedStakingRoom && !showTokenSwapping &&\n          !isMobile && (\n            <div className=\"close-team-room\" onClick={closeAlphaRoom}>\n              <img alt=\"close\" src={CloseAlpha} />\n            </div>\n          )}\n        {showTeamRoom && !isMobile && (\n          <div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(1)}\n              className=\"first-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(2)}\n              className=\"second-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(3)}\n              className=\"third-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(4)}\n              className=\"fourth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(5)}\n              className=\"fifth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(6)}\n              className=\"sixth-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(7)}\n              className=\"seventh-team-member\"\n            ></div>\n            <div\n              onMouseLeave={hideTeamInfo}\n              onMouseOver={() => showTeamInfoHover(8)}\n              className=\"eigth-team-member\"\n            ></div>\n          </div>\n        )}\n        {isMobile && menuOpen && (\n          <div className=\"cheeseburger-menu\">\n            <MenuContent closeCallback={closeMenu} />\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 1 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Gabriel</b>\n              <br />\n              <i>NFT artist</i>\n              <br />\n              Artist Extraordinaire. Delicately detailed.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 2 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Yogantar</b>\n              <br />\n              <i>Artist</i>\n              <br />\n              He sees, He makes, He thinks, He creates. No world is too far.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 3 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Wallace</b>\n              <br />\n              <i>Collab Chief</i>\n              <br />\n              Master Negotiator, One handshake is all it takes.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 4 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Vamshi</b>\n              <br />\n              <i>Front-end Dev</i>\n              <br />\n              Skillful savant. Code is art.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 5 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Bhargav</b>\n              <br />\n              <i>Back-end Dev</i>\n              <br />\n              Code Whizz. The magic happens at the back.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 6 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Walter</b>\n              <br />\n              <i>CEO</i>\n              <br />\n              Eyes all around. <span className=\"strikethrough\">Sex</span> Genius\n              Sells.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 7 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Kaizer</b>\n              <br />\n              <i>CMO</i>\n              <br />\n              The one holding all the cards. Shh…\n            </label>\n          </div>\n        )}\n        {showTeamRoom && showTeamInfo && teamInfoMember === 8 && (\n          <div className=\"mesage-container-team\">\n            <label className=\"message-container-label-small\">\n              <b>Sashi</b>\n              <br />\n              <i>COO</i>\n              <br />\n              King of discord. No bullshit, only work.\n            </label>\n          </div>\n        )}\n        {showTeamRoom && isMobile && !showMobileDoor && (\n          <div className=\"team-member-div\">\n            <Carousel responsive={responsive}>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Walter <span className=\"text-right\">CEO</span>\n                </label>\n                <img alt=\"Walter\" src={Walter} />\n                <label className=\"team-member-info-bottom\">\n                  <q>\n                    Eyes all around. <span className=\"strikethrough\">Sex</span>{\" \"}\n                    Genius Sells.\n                  </q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Kaizer <span className=\"text-right\">CMO</span>\n                </label>\n                <img alt=\"kaizer\" src={Kaizer} />\n                <label className=\"team-member-info-bottom\">\n                  <q>The one holding all the cards. Shh…</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Sashi <span className=\"text-right\">COO</span>\n                </label>\n                <img alt=\"Sashi\" src={Sashi} />\n                <label className=\"team-member-info-bottom\">\n                  <q>King of discord. No bullshit, only work.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Gabriel <span className=\"text-right\">NFT artist</span>\n                </label>\n                <img alt=\"Gabriel\" src={Gabriel} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Artist Extraordinaire. Delicately detailed.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Yogantar <span className=\"text-right\">Artist</span>\n                </label>\n                <img alt=\"Yogantar\" src={Yogantar} />\n                <label className=\"team-member-info-bottom\">\n                  <q>\n                    He sees, He makes, He thinks, He creates. No world is too\n                    far.\n                  </q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Wallace <span className=\"text-right\">Collab Chief</span>\n                </label>\n                <img alt=\"Wallace\" src={Wallace} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Master Negotiator, One handshake is all it takes.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Vamshi <span className=\"text-right\">Front-end Dev</span>\n                </label>\n                <img alt=\"Dev1\" src={Dev1} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Skillful savant. Code is art.</q>\n                </label>\n              </div>\n              <div className=\"team-member-image\">\n                <label className=\"team-member-info-top\">\n                  Bhargav <span className=\"text-right\">Back-end Dev</span>\n                </label>\n                <img alt=\"Dev2\" src={Dev2} />\n                <label className=\"team-member-info-bottom\">\n                  <q>Code Whizz. The magic happens at the back.</q>\n                </label>\n              </div>\n            </Carousel>\n          </div>\n        )}\n        {showAlphaRoom && !showTeamRoom && !showStakeRoom && !logoAlphaLoading && !logoLoading && !showMobileDoor && (\n          <div className=\"Backdrop-other\">\n            <div\n              className=\"alpha-room-phil-one\"\n              onClick={openFirstPhilAlphaRoom}\n            >\n              <div className=\"smaller-alpha-updates\">\n                <label className=\"typing-text story-line\">The Story</label>\n              </div>\n            </div>\n          </div>\n        )}\n        {showFixedStakingRoom && (\n          <div className=\"Backdrop-other\">\n            <div className=\"fixed-staking-main-bg\">\n              <div className=\"pull-left full-width\">\n                <div className=\"stake-logo-parent\">\n                  <img src={LogoWhite} className=\"stake-logo\" alt=\"\" />\n                  <img src={CloseAlpha} onClick={closeFixedStaking} className=\"stake-close-logo\" alt=\"\" />\n                </div>\n                <div className=\"stake-progress\">\n                  <ProgressBar bgcolor={\"#6a1b9a\"} completed={63} />\n                </div>\n                <div className=\"staking-process-parent\">\n                  <div className=\"unstaked-nfts-div\">\n                    <div className=\"staking-nft-display\">\n                    <div className=\"nft-parent-div\">\n                      {nfts && nfts.length > 0 && nfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-div\" style={{borderColor: stakedNft == item ? \"white\": \"transparent\"}} onClick={() => setStakedNft(item)}>\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                            {/* <label>{item.trait_type}</label> */}\n                          </div>\n                        );\n                      })}\n                    </div>\n                    {stakedNft && \n                    <div className=\"stake-button-div\"> \n                      <button className=\"nft-select-button\" onClick={nextStepStake}>Stake Now</button>\n                    </div>}\n                    </div>\n                  </div>\n                  <div className=\"staked-nfts-div\">\n                    <div className=\"staking-nft-display\">\n\n                    </div>\n                  </div>\n                </div>\n              </div> \n            </div>\n          </div>\n        )}\n        {!showAlphaRoom && !showTeamRoom && showStakeRoom && !logoAlphaLoading && !logoLoading && !showMobileDoor && (\n          <div className=\"\">\n            <div className=\"raffle-cave\">\n\n            </div>\n            <div className=\"token-swapping\" onClick={openTokenSwapping}>\n\n            </div>\n            <div className=\"staking-portal\">\n              <div className=\"staking-portal-parent\">\n              \n              </div>\n              <div className=\"adventure-staking-div\">\n\n              </div>\n              <div className=\"fixed-staking-div\" onClick={openFixedStaking}>\n\n              </div>\n            </div>\n            {!wallet.connected &&\n            <div className=\"staking-room-six\">\n              <WalletDialogButton className=\"Connect-Wallet-btn\" onClick={closeStaking}>\n                Connect Wallet\n              </WalletDialogButton>\n            </div> \n            }\n            {/* {wallet.connected &&\n            <div className=\"staking-room-six\" onClick={openStaking}>\n              <button className=\"outside-stake-btn\">Stake Now</button>\n            </div> \n            } */}\n          </div>\n        )}\n        {showTokenSwapping && (\n          <div className=\"Backdrop-other\">\n            <div className=\"fixed-staking-main-bg\">\n              <div className=\"pull-left full-width\">\n                <img src={CloseAlpha} onClick={closeTokenSwapping} className=\"swap-close-logo\" alt=\"\" />\n                <div className=\"swapping-process-parent\">\n                  <MintNewFungibleToken></MintNewFungibleToken>\n                </div>\n              </div> \n            </div>\n          </div>\n        )}\n        {showStaking && (\n          <div className=\"Backdrop-other-mint\">\n            <OutsideClickHandler onOutsideClick={closeStaking}>\n              <div className=\"stake-room-opened\">\n                <img className=\"stake-close-image\" onClick={closeStaking} src={Close} />\n                {nftStakeStep == 0 && \n                <div className=\"pull-left full-width full-height\">\n                    <div className=\"stake-room-header\">\n                      <h2>NFT Selection</h2>\n                    </div>\n                    <div className=\"nft-parent-div\">\n                      {nfts && nfts.length > 0 && nfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-div\" style={{borderColor: stakedNft == item ? \"white\": \"transparent\"}} onClick={() => setStakedNft(item)}>\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                    {stakedNft && \n                    <div className=\"stake-button-div\"> \n                      <button className=\"nft-select-button\" onClick={nextStepStake}>Next</button>\n                    </div>\n                    }\n                </div>\n                }\n                {nftStakeStep == 1 && \n                <div className=\"pull-left full-width full-height\">\n                    <div className=\"nft-deal-div\">\n                      <h2 className=\"deal-finalizing-text\">Finalizing the Deal</h2>\n                    </div>\n                </div>\n                }\n                {nftStakeStep == 2 && \n                <div className=\"pull-left full-width full-height\">\n                    <div className=\"nft-parent-div\">\n                      <h2 className=\"stake-congrats-header\">Congratulations !!!</h2>\n                      <label className=\"stake-congrats-text\">Your {stakedNft.name} has been<br/>successfully staked in<br/>{stakedCity}</label>\n                    </div>\n                </div>\n                }\n              </div>\n            </OutsideClickHandler>\n          </div>\n        )}\n        \n        {/* {showStakeDashboard && (\n          <div className=\"Backdrop-other-mint\">\n            <OutsideClickHandler onOutsideClick={() => setShowStakeDashboard(false)}>\n              <div className=\"stake-room-opened\">\n                <img className=\"stake-close-image\" onClick={() => setShowStakeDashboard(false)} src={Close} />\n                <div className=\"stake-room-header\">\n                  <h2 className=\"p-l-10-i\">General Dashboard</h2>\n                </div>\n                <div className=\"gen-dashboard-scroller\">\n                  <div className=\"gen-dahboard-stats\">\n                    <div className=\"gen-dashboard-stats-left\">\n                      <label>NFTs Staked</label>\n                      <h2>{stakedNfts.length} {unstakedNft != null && <button className=\"nft-select-button\" onClick={UnStakeNft}>Unstake</button>}</h2>\n                    </div>\n                    <div className=\"gen-dashboard-stats-right\">\n                      {stakedNfts && stakedNfts.length > 0 && stakedNfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-small-div\" style={{borderColor: unstakedNft == item ? \"white\": \"transparent\"}} onClick={() => setUnstakedNft(item)}>\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <div className=\"gen-dahboard-stats\">\n                    <div className=\"gen-dashboard-stats-left\">\n                      <label>Tokens Generated</label>\n                      <h2>{stakedTokens}</h2>\n                    </div>\n                    <div className=\"gen-dashboard-stats-right\">\n                      {stakedNfts && stakedNfts.length > 0 && stakedNfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-small-div\">\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <div className=\"gen-dahboard-stats\">\n                    <div className=\"gen-dashboard-stats-left\">\n                      <label>Respect Generated</label>\n                      <h2>{respectEarned}</h2>\n                    </div>\n                    <div className=\"gen-dashboard-stats-right\">\n                      {stakedNfts && stakedNfts.length > 0 && stakedNfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-small-div\">\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                  <div className=\"gen-dahboard-stats\">\n                    <div className=\"gen-dashboard-stats-left\">\n                      <label>Multiplier Level</label>\n                      <h2>{multiplierLevel}</h2>\n                    </div>\n                    <div className=\"gen-dashboard-stats-right\">\n                      {stakedNfts && stakedNfts.length > 0 && stakedNfts.map(function (item:any, i:any) {\n                        return (\n                          <div className=\"nft-small-div\">\n                            <img src={item.link} />\n                            <label>{item.name}</label>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n                \n              </div>\n            </OutsideClickHandler>\n          </div>\n        )} */}\n        {showFirstPhil && (\n          <div className=\"Backdrop-other\">\n            <OutsideClickHandler onOutsideClick={closeAlphaUpdates}>\n              <div className=\"alpha-holo\">\n                <div className=\"alpha-holo-updates\" id=\"alpha-scroll\">\n                  <img\n                    alt=\"Story-background\"\n                    src={AlphaScroll}\n                    className=\"alpha-scroll-icon\"\n                    onClick={scrollStory}\n                  />\n                  <label className=\"typing-text\">\n                    In the year 6969, a gang of 4 kids, led by their leader\n                    Jesse, venture out into the wild post-apocalyptic cyberpunk\n                    world of Alphazex, traveling through various cities,\n                    meandering through multiple adventures, just to answer a\n                    single question...\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Throughout the world of Alphazex, there is only one\n                    safeplace, one haven for Jesse and his friends. It's the\n                    Alpha hood.{\" \"}\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Originally, what was one of the biggest laboratories in the\n                    world for AI research, Alpha Labs was destroyed in the world\n                    wars that kept on occurring, The not-so-okay wars, the Creck\n                    wars, the cult vs tribe wars, and the once grand building of\n                    Alpha Labs was destroyed, or that's what people thought.\n                  </label>\n                  <label className=\"typing-text m-t-15\">\n                    Goverments and rulers came and went, and even though the\n                    existence of autonomous organizations was banned, one group\n                    thrived in the ruins of the same building that was thought\n                    to not exist. This organisation was, Secret Alpha.\n                  </label>\n                </div>\n              </div>\n            </OutsideClickHandler>\n          </div>\n        )}\n        {/* {showWhitelist && \n        <div>\n          <div className=\"Backdrop-other-mint\">\n            <OutsideClickHandler onOutsideClick={closeUpdates}>\n              <div className=\"bigger-holo\">\n                <div className=\"mint-inside-div\">\n                  <div className=\"whitelist-parent\">\n                    {!wallet.connected && \n                    <div className=\"pull-left full-width text-center\">\n                      <WalletDialogButton className=\"Inside-Connect-btn\">\n                        Connect\n                      </WalletDialogButton>\n                    </div>\n                    }\n                    <button className=\"whitelist-create-button m-t-15\" onClick={createWhitelistConfig}>Create Whitelist Config</button>\n                    <div className=\"pull-left full-width text-center m-t-15 m-b-15\">\n                      <label className=\"whitelist-texts\">Created Whitelist Accounts : {createdWlCounts}</label>\n                      <button className=\"whitelist-account-create\" onClick={createWhitelistAccountMultiple}>Create 10 Accounts</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </OutsideClickHandler>\n          </div>\n        </div>} */}\n        {showFarming && (\n          <div className=\"Backdrop-other-mint\">\n            <OutsideClickHandler onOutsideClick={() =>closeFarming()}>\n              {wallet.connected && \n              <div className=\"bigger-holo\">\n                <div className=\"stake-room-farm\">\n                  <div className=\"gen-dashboard-scroller\">\n                    <CreateFungibleToken/>\n                    <InitFarmAlpha/>\n                    <FundRewardAlpha/>\n                    <AddToBankWhitelist/>\n                    <div className=\"gen-farm-stats\">\n                      <div className=\"gen-farm-stats-left\">\n                        <input className=\"authorize-funder-reward-input\" placeholder=\"NFT Mint\" value={nftMint} onChange={event => setNftMint(event.target.value)} />\n                      </div>\n                      <div className=\"gen-farm-stats-right\">\n                        <button className=\"Inside-Farm-btn\" onClick={addRaritiesToBank}>Add Rarities to Bank</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              }\n              {!wallet.connected &&\n              <div className=\"bigger-holo\">\n                <div className=\"holo-updates\">\n                  <div className=\"mint-inside-div\">\n                    <WalletDialogButton className=\"Connect-Wallet-btn\">\n                      Connect Wallet\n                    </WalletDialogButton>\n                  </div>\n                </div>\n              </div>\n              }\n            </OutsideClickHandler>\n          </div>\n        )}\n        {!logoLoading && logoAlphaLoading && (\n          <div className=\"logo-loader-parent-alpha\">\n            <img alt=\"Alpha-logo\" src={LogoWhite} className=\"pulse-animation\" />\n          </div>\n        )}\n      </div>\n      <Snackbar\n        className=\"snack-bar\"\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          className=\"bold\"\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/config/config.ts",["275"],[],"import { PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport * as anchor from \"@project-serum/anchor\"\n\nexport const MAGIC_HAT_CREATOR = new anchor.web3.PublicKey(\n  \"H18mLh2oW73KBqRZ53La54qBafEaXBm9bXVefhKnMfXH\"\n);\n\nexport const MAGIC_HAT_ID = new anchor.web3.PublicKey(\n  \"86Yz2W2gh8gyupVhGuX9VxhNV6JoGQqD3RZzixajc4TZ\"\n);\n\nexport const MAGIC_HAT_PROGRAM_V2_ID = new anchor.web3.PublicKey(\n  \"JBw14YzhNTQGqUX54MatDgxDrCPopKf4EGcJHoHfq5ha\"\n);\n\nexport const FARM_ID = new anchor.web3.PublicKey(\"78yzdAb2quRrZWgQi114jdJrsroscWfV3AdVDQYsTFt8\");\n\nexport const MAHANOTHIA_FARM_ID = new anchor.web3.PublicKey(\"9oc6wxJwAkiB3rj6rSniAJYmtNbVjKmZkj4dLY7CjYvm\");\n\nexport const SAN_CHETOS_FARM_ID = new anchor.web3.PublicKey(\"78yzdAb2quRrZWgQi114jdJrsroscWfV3AdVDQYsTFt8\");\n\nexport const MAGNEXIA_FARM_ID = new anchor.web3.PublicKey(\"78yzdAb2quRrZWgQi114jdJrsroscWfV3AdVDQYsTFt8\");\n\nexport const RAUDCHERI_FARM_ID = new anchor.web3.PublicKey(\"78yzdAb2quRrZWgQi114jdJrsroscWfV3AdVDQYsTFt8\");\n\nexport const BASEMENT_FARM_ID = new anchor.web3.PublicKey(\"78yzdAb2quRrZWgQi114jdJrsroscWfV3AdVDQYsTFt8\");\n\n\n\nexport const REWARD_MINT = new anchor.web3.PublicKey('x4zmbszSajZe8Qg8H1J9s1hMsrDTYjPDe4qp8fJcgMa');\n\nexport const FEE_WALLET = new anchor.web3.PublicKey('Bi4UpEtKxnHwCw7b9xkMCouGT6xLNm8nixs2fTmxTevs');\n\nexport const COLLECTION_ID = new anchor.web3.PublicKey(\"EtaEw6kTxgfSPNy1cWRXQ8DFcVCxQo9V1bjJqytMubfs\");\n\nexport const SYSVAR_CLOCK_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarC1ock11111111111111111111111111111111\"\n);\n\nexport const TOKEN_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarEpochSchedu1e111111111111111111111111\"\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new anchor.web3.PublicKey(\n  \"Sysvar1nstructions1111111111111111111111111\"\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarRecentB1ockHashes11111111111111111111\"\n);\n\nexport const SYSVAR_RENT_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarRent111111111111111111111111111111111\"\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarRewards111111111111111111111111111111\"\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarRecentB1ockHashes11111111111111111111\"\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarS1otHistory11111111111111111111111111\"\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new anchor.web3.PublicKey(\n  \"SysvarStakeHistory1111111111111111111111111\"\n);\n\nexport const pdaSeed = \"wallet-whitelist\";\n\nexport const pdaWhitelistSeed = \"whitelist-config\";\n\nexport const network = clusterApiUrl(\"devnet\");\n\nexport const connectionsOptions = {\n  preflightCommitment: \"processed\",\n};\n\nexport const GOG_TIME = 1656435600;\nexport const WL_TIME = 1656437400;\nexport const PUBLIC_TIME = 1656442800;\nexport const COMMUNITY_TIME = 1656434400;\n\nexport const GOG_PRICE = 1.69;\nexport const OG_PRICE = 1.9;\nexport const WL_PRICE = 1.9;\nexport const PUBLIC_PRICE = 2.29;\nexport const COMMUNITY_PRICE = 0.01;","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/progress-bar.tsx",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/menu.tsx",["276"],[],"import { useState } from \"react\";\nimport Discord from \"../assets/discord.png\";\nimport Twitter from \"../assets/twitter_copy.png\";\nimport RightArrow from \"../assets/right_arrow_menu.png\";\nimport \"../css/App.css\";\n\nconst MenuContent = (props: any) => {\n  const [items] = useState([\"VAULT\", \"TEAM\", \"ALPHA\", \"STAKE\"]);\n\n  return (\n    <div className=\"menu\">\n      {items.map((i) => (\n        <div className=\"menu-item\" key={i}>\n          <a\n            className=\"menu-item-inside\"\n            onClick={() => props.closeCallback(i)}\n            target=\"_blank\"\n          >\n            {i}{\" \"}\n            <span className=\"right-arrow-menu\">\n              <img alt=\"Right-arrow\" src={RightArrow} />\n            </span>\n          </a>\n        </div>\n      ))}\n      <div className=\"menu-item m-t-15\">\n        <a\n          className=\"menu-item-inside\"\n          href=\"https://secret-alpha.gitbook.io/glitch/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          Whitepaper{\" \"}\n          <span className=\"right-arrow-menu\">\n            <img alt=\"Right-arrow\" src={RightArrow} />\n          </span>\n        </a>\n      </div>\n      <div className=\"social-media-mobile\">\n        <a\n          href=\"https://twitter.com/SecretAlphaLabs\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Twitter\" className=\"social-icons-mobile\" src={Twitter} />\n        </a>\n        <a\n          href=\"https://discord.com/invite/SecretAlpha\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          onClick={() => props.closeCallback(1)}\n        >\n          <img alt=\"Discord\" className=\"social-icons-mobile\" src={Discord} />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default MenuContent;\n","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/AddToBankWhitelist.tsx",[],["277","278"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/config/connection.tsx",[],["279"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/FundRewardAlpha.tsx",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/AssociatedTokenAccountProgram/pda.ts",["280"],[],"import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID } from \"./constants\";\nimport { MAGIC_STAKE_PROGRAM_ID, GEM_BANK_PROGRAM_ID } from \"../gemBank/getProgramObjects\";\n\nexport const findAssociatedTokenAddress = async(walletAddress: PublicKey, tokenMintAddress: PublicKey) => {\n  return (await PublicKey.findProgramAddress([\n      walletAddress.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      tokenMintAddress.toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  ));\n}\n\nexport const alphaTokenSwapPda =async (walletAddress: PublicKey, mint:PublicKey) => {\n  return (await PublicKey.findProgramAddress([\n      Buffer.from('alpha_tokenswap'),\n      walletAddress.toBuffer(),\n      mint.toBuffer()\n    ],\n    MAGIC_STAKE_PROGRAM_ID\n  ));\n}\n\nexport const alphaPotPda =async (pda:any, mint:PublicKey) => {\n  return (await PublicKey.findProgramAddress([\n      Buffer.from('alpha_pot'),\n      pda.toBuffer(),\n      mint.toBuffer()\n    ],\n    MAGIC_STAKE_PROGRAM_ID\n  ));\n}\n","/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/gemBank/getProgramObjects.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/tokenMetadata/constants.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/CreateFungibleToken.tsx",[],["281","282","283","284","285","286","287","288"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/programs/candy-machine.ts",[],["289"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/InitFarmAlpha.tsx",[],["290"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/StakeConfig.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/gemBank/pda.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/GrandProgramUtils/AssociatedTokenAccountProgram/constants.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/AlphaTokenConfig.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/nft-utilities/readTraits.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/utils/utils.ts",[],[],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/AlphaStaking/AuthorizeFunderAlpha.tsx",[],["291","292","293","294","295","296","297","298"],"/Users/vamshikrishnaenjapuri/Documents/SAL_UI/src/components/TokenCreation/MintNewFungibleToken.tsx",["299","300","301","302","303","304","305","306","307","308","309","310"],[],{"ruleId":"311","severity":1,"message":"312","line":2019,"column":13,"nodeType":"313","messageId":"314","endLine":2019,"endColumn":16},{"ruleId":"315","severity":1,"message":"316","line":46,"column":8,"nodeType":"313","messageId":"317","endLine":46,"endColumn":20,"suppressions":"318"},{"ruleId":"315","severity":1,"message":"319","line":51,"column":3,"nodeType":"313","messageId":"317","endLine":51,"endColumn":10,"suppressions":"320"},{"ruleId":"315","severity":1,"message":"321","line":53,"column":3,"nodeType":"313","messageId":"317","endLine":53,"endColumn":20,"suppressions":"322"},{"ruleId":"315","severity":1,"message":"323","line":63,"column":3,"nodeType":"313","messageId":"317","endLine":63,"endColumn":13,"suppressions":"324"},{"ruleId":"315","severity":1,"message":"325","line":91,"column":10,"nodeType":"313","messageId":"317","endLine":91,"endColumn":25,"suppressions":"326"},{"ruleId":"315","severity":1,"message":"327","line":100,"column":80,"nodeType":"313","messageId":"317","endLine":100,"endColumn":97,"suppressions":"328"},{"ruleId":"315","severity":1,"message":"329","line":151,"column":11,"nodeType":"313","messageId":"317","endLine":151,"endColumn":23,"suppressions":"330"},{"ruleId":"315","severity":1,"message":"331","line":156,"column":11,"nodeType":"313","messageId":"317","endLine":156,"endColumn":29,"suppressions":"332"},{"ruleId":"315","severity":1,"message":"333","line":162,"column":11,"nodeType":"313","messageId":"317","endLine":162,"endColumn":24,"suppressions":"334"},{"ruleId":"315","severity":1,"message":"335","line":189,"column":10,"nodeType":"313","messageId":"317","endLine":189,"endColumn":18,"suppressions":"336"},{"ruleId":"315","severity":1,"message":"337","line":214,"column":22,"nodeType":"313","messageId":"317","endLine":214,"endColumn":35,"suppressions":"338"},{"ruleId":"315","severity":1,"message":"339","line":216,"column":10,"nodeType":"313","messageId":"317","endLine":216,"endColumn":14,"suppressions":"340"},{"ruleId":"315","severity":1,"message":"341","line":217,"column":10,"nodeType":"313","messageId":"317","endLine":217,"endColumn":23,"suppressions":"342"},{"ruleId":"315","severity":1,"message":"343","line":217,"column":25,"nodeType":"313","messageId":"317","endLine":217,"endColumn":41,"suppressions":"344"},{"ruleId":"315","severity":1,"message":"345","line":225,"column":10,"nodeType":"313","messageId":"317","endLine":225,"endColumn":25,"suppressions":"346"},{"ruleId":"315","severity":1,"message":"347","line":225,"column":27,"nodeType":"313","messageId":"317","endLine":225,"endColumn":45,"suppressions":"348"},{"ruleId":"315","severity":1,"message":"349","line":227,"column":10,"nodeType":"313","messageId":"317","endLine":227,"endColumn":26,"suppressions":"350"},{"ruleId":"315","severity":1,"message":"351","line":229,"column":10,"nodeType":"313","messageId":"317","endLine":229,"endColumn":21,"suppressions":"352"},{"ruleId":"315","severity":1,"message":"353","line":229,"column":23,"nodeType":"313","messageId":"317","endLine":229,"endColumn":37,"suppressions":"354"},{"ruleId":"315","severity":1,"message":"355","line":231,"column":10,"nodeType":"313","messageId":"317","endLine":231,"endColumn":22,"suppressions":"356"},{"ruleId":"315","severity":1,"message":"357","line":232,"column":10,"nodeType":"313","messageId":"317","endLine":232,"endColumn":25,"suppressions":"358"},{"ruleId":"315","severity":1,"message":"359","line":233,"column":10,"nodeType":"313","messageId":"317","endLine":233,"endColumn":23,"suppressions":"360"},{"ruleId":"315","severity":1,"message":"361","line":235,"column":10,"nodeType":"313","messageId":"317","endLine":235,"endColumn":22,"suppressions":"362"},{"ruleId":"315","severity":1,"message":"363","line":235,"column":24,"nodeType":"313","messageId":"317","endLine":235,"endColumn":39,"suppressions":"364"},{"ruleId":"315","severity":1,"message":"365","line":237,"column":10,"nodeType":"313","messageId":"317","endLine":237,"endColumn":26,"suppressions":"366"},{"ruleId":"315","severity":1,"message":"367","line":237,"column":28,"nodeType":"313","messageId":"317","endLine":237,"endColumn":47,"suppressions":"368"},{"ruleId":"315","severity":1,"message":"369","line":238,"column":10,"nodeType":"313","messageId":"317","endLine":238,"endColumn":18,"suppressions":"370"},{"ruleId":"315","severity":1,"message":"371","line":238,"column":20,"nodeType":"313","messageId":"317","endLine":238,"endColumn":31,"suppressions":"372"},{"ruleId":"315","severity":1,"message":"373","line":239,"column":10,"nodeType":"313","messageId":"317","endLine":239,"endColumn":17,"suppressions":"374"},{"ruleId":"315","severity":1,"message":"375","line":245,"column":30,"nodeType":"313","messageId":"317","endLine":245,"endColumn":51,"suppressions":"376"},{"ruleId":"315","severity":1,"message":"377","line":247,"column":10,"nodeType":"313","messageId":"317","endLine":247,"endColumn":14,"suppressions":"378"},{"ruleId":"315","severity":1,"message":"379","line":247,"column":16,"nodeType":"313","messageId":"317","endLine":247,"endColumn":23,"suppressions":"380"},{"ruleId":"315","severity":1,"message":"381","line":248,"column":10,"nodeType":"313","messageId":"317","endLine":248,"endColumn":19,"suppressions":"382"},{"ruleId":"315","severity":1,"message":"383","line":249,"column":10,"nodeType":"313","messageId":"317","endLine":249,"endColumn":23,"suppressions":"384"},{"ruleId":"315","severity":1,"message":"385","line":250,"column":10,"nodeType":"313","messageId":"317","endLine":250,"endColumn":20,"suppressions":"386"},{"ruleId":"315","severity":1,"message":"387","line":251,"column":10,"nodeType":"313","messageId":"317","endLine":251,"endColumn":23,"suppressions":"388"},{"ruleId":"315","severity":1,"message":"389","line":252,"column":10,"nodeType":"313","messageId":"317","endLine":252,"endColumn":22,"suppressions":"390"},{"ruleId":"315","severity":1,"message":"391","line":252,"column":24,"nodeType":"313","messageId":"317","endLine":252,"endColumn":39,"suppressions":"392"},{"ruleId":"315","severity":1,"message":"393","line":253,"column":10,"nodeType":"313","messageId":"317","endLine":253,"endColumn":16,"suppressions":"394"},{"ruleId":"315","severity":1,"message":"395","line":253,"column":18,"nodeType":"313","messageId":"317","endLine":253,"endColumn":27,"suppressions":"396"},{"ruleId":"315","severity":1,"message":"397","line":259,"column":10,"nodeType":"313","messageId":"317","endLine":259,"endColumn":19,"suppressions":"398"},{"ruleId":"315","severity":1,"message":"399","line":260,"column":10,"nodeType":"313","messageId":"317","endLine":260,"endColumn":19,"suppressions":"400"},{"ruleId":"315","severity":1,"message":"401","line":261,"column":10,"nodeType":"313","messageId":"317","endLine":261,"endColumn":21,"suppressions":"402"},{"ruleId":"315","severity":1,"message":"403","line":262,"column":10,"nodeType":"313","messageId":"317","endLine":262,"endColumn":20,"suppressions":"404"},{"ruleId":"315","severity":1,"message":"405","line":263,"column":10,"nodeType":"313","messageId":"317","endLine":263,"endColumn":20,"suppressions":"406"},{"ruleId":"315","severity":1,"message":"407","line":265,"column":10,"nodeType":"313","messageId":"317","endLine":265,"endColumn":26,"suppressions":"408"},{"ruleId":"315","severity":1,"message":"409","line":265,"column":28,"nodeType":"313","messageId":"317","endLine":265,"endColumn":47,"suppressions":"410"},{"ruleId":"315","severity":1,"message":"411","line":268,"column":10,"nodeType":"313","messageId":"317","endLine":268,"endColumn":24,"suppressions":"412"},{"ruleId":"315","severity":1,"message":"413","line":269,"column":10,"nodeType":"313","messageId":"317","endLine":269,"endColumn":23,"suppressions":"414"},{"ruleId":"315","severity":1,"message":"415","line":305,"column":15,"nodeType":"313","messageId":"317","endLine":305,"endColumn":21,"suppressions":"416"},{"ruleId":"315","severity":1,"message":"417","line":306,"column":15,"nodeType":"313","messageId":"317","endLine":306,"endColumn":21,"suppressions":"418"},{"ruleId":"315","severity":1,"message":"419","line":363,"column":9,"nodeType":"313","messageId":"317","endLine":363,"endColumn":20,"suppressions":"420"},{"ruleId":"421","severity":1,"message":"422","line":373,"column":26,"nodeType":"423","messageId":"424","endLine":373,"endColumn":28,"suppressions":"425"},{"ruleId":"421","severity":1,"message":"422","line":379,"column":68,"nodeType":"423","messageId":"424","endLine":379,"endColumn":70,"suppressions":"426"},{"ruleId":"427","severity":1,"message":"428","line":444,"column":6,"nodeType":"429","endLine":453,"endColumn":4,"suggestions":"430","suppressions":"431"},{"ruleId":"315","severity":1,"message":"432","line":505,"column":9,"nodeType":"313","messageId":"317","endLine":505,"endColumn":19,"suppressions":"433"},{"ruleId":"315","severity":1,"message":"434","line":527,"column":9,"nodeType":"313","messageId":"317","endLine":527,"endColumn":26,"suppressions":"435"},{"ruleId":"315","severity":1,"message":"436","line":541,"column":9,"nodeType":"313","messageId":"317","endLine":541,"endColumn":29,"suppressions":"437"},{"ruleId":"421","severity":1,"message":"422","line":621,"column":40,"nodeType":"423","messageId":"424","endLine":621,"endColumn":42,"suppressions":"438"},{"ruleId":"421","severity":1,"message":"422","line":621,"column":132,"nodeType":"423","messageId":"424","endLine":621,"endColumn":134,"suppressions":"439"},{"ruleId":"421","severity":1,"message":"422","line":854,"column":51,"nodeType":"423","messageId":"424","endLine":854,"endColumn":53,"suppressions":"440"},{"ruleId":"421","severity":1,"message":"422","line":858,"column":31,"nodeType":"423","messageId":"424","endLine":858,"endColumn":33,"suppressions":"441"},{"ruleId":"421","severity":1,"message":"422","line":875,"column":40,"nodeType":"423","messageId":"424","endLine":875,"endColumn":42,"suppressions":"442"},{"ruleId":"421","severity":1,"message":"422","line":875,"column":71,"nodeType":"423","messageId":"424","endLine":875,"endColumn":73,"suppressions":"443"},{"ruleId":"421","severity":1,"message":"422","line":878,"column":45,"nodeType":"423","messageId":"424","endLine":878,"endColumn":47,"suppressions":"444"},{"ruleId":"421","severity":1,"message":"422","line":878,"column":76,"nodeType":"423","messageId":"424","endLine":878,"endColumn":78,"suppressions":"445"},{"ruleId":"421","severity":1,"message":"422","line":881,"column":40,"nodeType":"423","messageId":"424","endLine":881,"endColumn":42,"suppressions":"446"},{"ruleId":"315","severity":1,"message":"447","line":921,"column":9,"nodeType":"313","messageId":"317","endLine":921,"endColumn":28,"suppressions":"448"},{"ruleId":"421","severity":1,"message":"422","line":923,"column":12,"nodeType":"423","messageId":"424","endLine":923,"endColumn":14,"suppressions":"449"},{"ruleId":"421","severity":1,"message":"422","line":926,"column":17,"nodeType":"423","messageId":"424","endLine":926,"endColumn":19,"suppressions":"450"},{"ruleId":"421","severity":1,"message":"422","line":929,"column":17,"nodeType":"423","messageId":"424","endLine":929,"endColumn":19,"suppressions":"451"},{"ruleId":"421","severity":1,"message":"422","line":932,"column":12,"nodeType":"423","messageId":"424","endLine":932,"endColumn":14,"suppressions":"452"},{"ruleId":"421","severity":1,"message":"422","line":960,"column":17,"nodeType":"423","messageId":"424","endLine":960,"endColumn":19,"suppressions":"453"},{"ruleId":"421","severity":1,"message":"422","line":993,"column":12,"nodeType":"423","messageId":"424","endLine":993,"endColumn":14,"suppressions":"454"},{"ruleId":"421","severity":1,"message":"422","line":996,"column":17,"nodeType":"423","messageId":"424","endLine":996,"endColumn":19,"suppressions":"455"},{"ruleId":"421","severity":1,"message":"422","line":999,"column":17,"nodeType":"423","messageId":"424","endLine":999,"endColumn":19,"suppressions":"456"},{"ruleId":"421","severity":1,"message":"422","line":1002,"column":17,"nodeType":"423","messageId":"424","endLine":1002,"endColumn":19,"suppressions":"457"},{"ruleId":"315","severity":1,"message":"458","line":1034,"column":9,"nodeType":"313","messageId":"317","endLine":1034,"endColumn":23,"suppressions":"459"},{"ruleId":"315","severity":1,"message":"460","line":1044,"column":13,"nodeType":"313","messageId":"317","endLine":1044,"endColumn":22,"suppressions":"461"},{"ruleId":"315","severity":1,"message":"462","line":1063,"column":9,"nodeType":"313","messageId":"317","endLine":1063,"endColumn":28,"suppressions":"463"},{"ruleId":"315","severity":1,"message":"460","line":1072,"column":13,"nodeType":"313","messageId":"317","endLine":1072,"endColumn":22,"suppressions":"464"},{"ruleId":"315","severity":1,"message":"465","line":1092,"column":9,"nodeType":"313","messageId":"317","endLine":1092,"endColumn":31,"suppressions":"466"},{"ruleId":"421","severity":1,"message":"422","line":1094,"column":12,"nodeType":"423","messageId":"424","endLine":1094,"endColumn":14,"suppressions":"467"},{"ruleId":"421","severity":1,"message":"422","line":1097,"column":17,"nodeType":"423","messageId":"424","endLine":1097,"endColumn":19,"suppressions":"468"},{"ruleId":"315","severity":1,"message":"469","line":1148,"column":29,"nodeType":"313","messageId":"317","endLine":1148,"endColumn":39,"suppressions":"470"},{"ruleId":"315","severity":1,"message":"471","line":1157,"column":13,"nodeType":"313","messageId":"317","endLine":1157,"endColumn":16,"suppressions":"472"},{"ruleId":"315","severity":1,"message":"473","line":1240,"column":7,"nodeType":"313","messageId":"317","endLine":1240,"endColumn":27,"suppressions":"474"},{"ruleId":"421","severity":1,"message":"422","line":1247,"column":34,"nodeType":"423","messageId":"424","endLine":1247,"endColumn":36,"suppressions":"475"},{"ruleId":"421","severity":1,"message":"422","line":1250,"column":39,"nodeType":"423","messageId":"424","endLine":1250,"endColumn":41,"suppressions":"476"},{"ruleId":"421","severity":1,"message":"422","line":1253,"column":39,"nodeType":"423","messageId":"424","endLine":1253,"endColumn":41,"suppressions":"477"},{"ruleId":"421","severity":1,"message":"422","line":1256,"column":39,"nodeType":"423","messageId":"424","endLine":1256,"endColumn":41,"suppressions":"478"},{"ruleId":"315","severity":1,"message":"479","line":1263,"column":15,"nodeType":"313","messageId":"317","endLine":1263,"endColumn":22,"suppressions":"480"},{"ruleId":"421","severity":1,"message":"422","line":1264,"column":52,"nodeType":"423","messageId":"424","endLine":1264,"endColumn":54,"suppressions":"481"},{"ruleId":"421","severity":1,"message":"422","line":1267,"column":60,"nodeType":"423","messageId":"424","endLine":1267,"endColumn":62,"suppressions":"482"},{"ruleId":"421","severity":1,"message":"422","line":1270,"column":58,"nodeType":"423","messageId":"424","endLine":1270,"endColumn":60,"suppressions":"483"},{"ruleId":"421","severity":1,"message":"422","line":1273,"column":62,"nodeType":"423","messageId":"424","endLine":1273,"endColumn":64,"suppressions":"484"},{"ruleId":"315","severity":1,"message":"485","line":1281,"column":32,"nodeType":"313","messageId":"317","endLine":1281,"endColumn":47,"suppressions":"486"},{"ruleId":"315","severity":1,"message":"487","line":1292,"column":15,"nodeType":"313","messageId":"317","endLine":1292,"endColumn":21,"suppressions":"488"},{"ruleId":"315","severity":1,"message":"489","line":1314,"column":15,"nodeType":"313","messageId":"317","endLine":1314,"endColumn":29,"suppressions":"490"},{"ruleId":"315","severity":1,"message":"491","line":1366,"column":16,"nodeType":"313","messageId":"317","endLine":1366,"endColumn":24,"suppressions":"492"},{"ruleId":"315","severity":1,"message":"493","line":1368,"column":16,"nodeType":"313","messageId":"317","endLine":1368,"endColumn":36,"suppressions":"494"},{"ruleId":"315","severity":1,"message":"495","line":1419,"column":9,"nodeType":"313","messageId":"317","endLine":1419,"endColumn":19,"suppressions":"496"},{"ruleId":"315","severity":1,"message":"497","line":1421,"column":12,"nodeType":"313","messageId":"317","endLine":1421,"endColumn":21,"suppressions":"498"},{"ruleId":"315","severity":1,"message":"469","line":1421,"column":23,"nodeType":"313","messageId":"317","endLine":1421,"endColumn":33,"suppressions":"499"},{"ruleId":"315","severity":1,"message":"479","line":1425,"column":11,"nodeType":"313","messageId":"317","endLine":1425,"endColumn":18,"suppressions":"500"},{"ruleId":"315","severity":1,"message":"491","line":1427,"column":14,"nodeType":"313","messageId":"317","endLine":1427,"endColumn":22,"suppressions":"501"},{"ruleId":"315","severity":1,"message":"471","line":1434,"column":9,"nodeType":"313","messageId":"317","endLine":1434,"endColumn":12,"suppressions":"502"},{"ruleId":"315","severity":1,"message":"485","line":1440,"column":30,"nodeType":"313","messageId":"317","endLine":1440,"endColumn":45,"suppressions":"503"},{"ruleId":"315","severity":1,"message":"504","line":1444,"column":14,"nodeType":"313","messageId":"317","endLine":1444,"endColumn":26,"suppressions":"505"},{"ruleId":"315","severity":1,"message":"506","line":1444,"column":28,"nodeType":"313","messageId":"317","endLine":1444,"endColumn":44,"suppressions":"507"},{"ruleId":"315","severity":1,"message":"508","line":1536,"column":9,"nodeType":"313","messageId":"317","endLine":1536,"endColumn":30,"suppressions":"509"},{"ruleId":"315","severity":1,"message":"510","line":1538,"column":14,"nodeType":"313","messageId":"317","endLine":1538,"endColumn":34,"suppressions":"511"},{"ruleId":"315","severity":1,"message":"512","line":1538,"column":36,"nodeType":"313","messageId":"317","endLine":1538,"endColumn":40,"suppressions":"513"},{"ruleId":"315","severity":1,"message":"510","line":1551,"column":14,"nodeType":"313","messageId":"317","endLine":1551,"endColumn":34,"suppressions":"514"},{"ruleId":"315","severity":1,"message":"512","line":1551,"column":36,"nodeType":"313","messageId":"317","endLine":1551,"endColumn":40,"suppressions":"515"},{"ruleId":"421","severity":1,"message":"422","line":1583,"column":23,"nodeType":"423","messageId":"424","endLine":1583,"endColumn":25,"suppressions":"516"},{"ruleId":"421","severity":1,"message":"422","line":1586,"column":25,"nodeType":"423","messageId":"424","endLine":1586,"endColumn":27,"suppressions":"517"},{"ruleId":"421","severity":1,"message":"422","line":1617,"column":32,"nodeType":"423","messageId":"424","endLine":1617,"endColumn":34,"suppressions":"518"},{"ruleId":"421","severity":1,"message":"422","line":1648,"column":32,"nodeType":"423","messageId":"424","endLine":1648,"endColumn":34,"suppressions":"519"},{"ruleId":"421","severity":1,"message":"422","line":1679,"column":28,"nodeType":"423","messageId":"424","endLine":1679,"endColumn":30,"suppressions":"520"},{"ruleId":"315","severity":1,"message":"521","line":1738,"column":9,"nodeType":"313","messageId":"317","endLine":1738,"endColumn":22,"suppressions":"522"},{"ruleId":"315","severity":1,"message":"523","line":1743,"column":9,"nodeType":"313","messageId":"317","endLine":1743,"endColumn":23,"suppressions":"524"},{"ruleId":"315","severity":1,"message":"525","line":1799,"column":9,"nodeType":"313","messageId":"317","endLine":1799,"endColumn":24,"suppressions":"526"},{"ruleId":"315","severity":1,"message":"527","line":1820,"column":9,"nodeType":"313","messageId":"317","endLine":1820,"endColumn":20,"suppressions":"528"},{"ruleId":"315","severity":1,"message":"529","line":1822,"column":11,"nodeType":"313","messageId":"317","endLine":1822,"endColumn":16,"suppressions":"530"},{"ruleId":"315","severity":1,"message":"531","line":1827,"column":25,"nodeType":"313","messageId":"317","endLine":1827,"endColumn":30,"suppressions":"532"},{"ruleId":"315","severity":1,"message":"533","line":1828,"column":11,"nodeType":"313","messageId":"317","endLine":1828,"endColumn":23,"suppressions":"534"},{"ruleId":"315","severity":1,"message":"535","line":1845,"column":11,"nodeType":"313","messageId":"317","endLine":1845,"endColumn":19,"suppressions":"536"},{"ruleId":"421","severity":1,"message":"422","line":1951,"column":15,"nodeType":"423","messageId":"424","endLine":1951,"endColumn":17,"suppressions":"537"},{"ruleId":"421","severity":1,"message":"422","line":1974,"column":20,"nodeType":"423","messageId":"424","endLine":1974,"endColumn":22,"suppressions":"538"},{"ruleId":"421","severity":1,"message":"422","line":1986,"column":32,"nodeType":"423","messageId":"424","endLine":1986,"endColumn":34,"suppressions":"539"},{"ruleId":"421","severity":1,"message":"422","line":1992,"column":32,"nodeType":"423","messageId":"424","endLine":1992,"endColumn":34,"suppressions":"540"},{"ruleId":"421","severity":1,"message":"422","line":1998,"column":34,"nodeType":"423","messageId":"424","endLine":1998,"endColumn":36,"suppressions":"541"},{"ruleId":"421","severity":1,"message":"422","line":2004,"column":33,"nodeType":"423","messageId":"424","endLine":2004,"endColumn":35,"suppressions":"542"},{"ruleId":"421","severity":1,"message":"422","line":2010,"column":33,"nodeType":"423","messageId":"424","endLine":2010,"endColumn":35,"suppressions":"543"},{"ruleId":"315","severity":1,"message":"544","line":2057,"column":9,"nodeType":"313","messageId":"317","endLine":2057,"endColumn":26,"suppressions":"545"},{"ruleId":"315","severity":1,"message":"546","line":2062,"column":9,"nodeType":"313","messageId":"317","endLine":2062,"endColumn":15,"suppressions":"547"},{"ruleId":"315","severity":1,"message":"548","line":2065,"column":9,"nodeType":"313","messageId":"317","endLine":2065,"endColumn":21,"suppressions":"549"},{"ruleId":"421","severity":1,"message":"422","line":2233,"column":28,"nodeType":"423","messageId":"424","endLine":2233,"endColumn":30,"suppressions":"550"},{"ruleId":"421","severity":1,"message":"422","line":2702,"column":83,"nodeType":"423","messageId":"424","endLine":2702,"endColumn":85,"suppressions":"551"},{"ruleId":"552","severity":1,"message":"553","line":2703,"column":29,"nodeType":"554","endLine":2703,"endColumn":52,"suppressions":"555"},{"ruleId":"552","severity":1,"message":"553","line":2775,"column":17,"nodeType":"554","endLine":2775,"endColumn":89,"suppressions":"556"},{"ruleId":"421","severity":1,"message":"422","line":2776,"column":31,"nodeType":"423","messageId":"424","endLine":2776,"endColumn":33,"suppressions":"557"},{"ruleId":"421","severity":1,"message":"422","line":2784,"column":83,"nodeType":"423","messageId":"424","endLine":2784,"endColumn":85,"suppressions":"558"},{"ruleId":"552","severity":1,"message":"553","line":2785,"column":29,"nodeType":"554","endLine":2785,"endColumn":52,"suppressions":"559"},{"ruleId":"421","severity":1,"message":"422","line":2798,"column":31,"nodeType":"423","messageId":"424","endLine":2798,"endColumn":33,"suppressions":"560"},{"ruleId":"421","severity":1,"message":"422","line":2805,"column":31,"nodeType":"423","messageId":"424","endLine":2805,"endColumn":33,"suppressions":"561"},{"ruleId":"315","severity":1,"message":"562","line":1,"column":10,"nodeType":"313","messageId":"317","endLine":1,"endColumn":19},{"ruleId":"563","severity":1,"message":"564","line":14,"column":11,"nodeType":"554","endLine":18,"endColumn":12},{"ruleId":"315","severity":1,"message":"409","line":25,"column":28,"nodeType":"313","messageId":"317","endLine":25,"endColumn":47,"suppressions":"565"},{"ruleId":"315","severity":1,"message":"566","line":94,"column":9,"nodeType":"313","messageId":"317","endLine":94,"endColumn":31,"suppressions":"567"},{"ruleId":"568","severity":1,"message":"569","line":503,"column":8,"nodeType":"570","messageId":"571","endLine":529,"endColumn":8,"suppressions":"572"},{"ruleId":"315","severity":1,"message":"573","line":4,"column":34,"nodeType":"313","messageId":"317","endLine":4,"endColumn":53},{"ruleId":"315","severity":1,"message":"574","line":2,"column":116,"nodeType":"313","messageId":"317","endLine":2,"endColumn":141,"suppressions":"575"},{"ruleId":"315","severity":1,"message":"576","line":2,"column":179,"nodeType":"313","messageId":"317","endLine":2,"endColumn":186,"suppressions":"577"},{"ruleId":"315","severity":1,"message":"578","line":3,"column":25,"nodeType":"313","messageId":"317","endLine":3,"endColumn":32,"suppressions":"579"},{"ruleId":"315","severity":1,"message":"580","line":10,"column":30,"nodeType":"313","messageId":"317","endLine":10,"endColumn":49,"suppressions":"581"},{"ruleId":"315","severity":1,"message":"582","line":13,"column":14,"nodeType":"313","messageId":"317","endLine":13,"endColumn":21,"suppressions":"583"},{"ruleId":"315","severity":1,"message":"584","line":25,"column":20,"nodeType":"313","messageId":"317","endLine":25,"endColumn":27,"suppressions":"585"},{"ruleId":"315","severity":1,"message":"586","line":31,"column":13,"nodeType":"313","messageId":"317","endLine":31,"endColumn":36,"suppressions":"587"},{"ruleId":"315","severity":1,"message":"531","line":95,"column":33,"nodeType":"313","messageId":"317","endLine":95,"endColumn":38,"suppressions":"588"},{"ruleId":"568","severity":1,"message":"569","line":89,"column":8,"nodeType":"570","messageId":"571","endLine":115,"endColumn":8,"suppressions":"589"},{"ruleId":"315","severity":1,"message":"590","line":80,"column":26,"nodeType":"313","messageId":"317","endLine":80,"endColumn":40,"suppressions":"591"},{"ruleId":"315","severity":1,"message":"592","line":26,"column":10,"nodeType":"313","messageId":"317","endLine":26,"endColumn":22,"suppressions":"593"},{"ruleId":"315","severity":1,"message":"594","line":27,"column":10,"nodeType":"313","messageId":"317","endLine":27,"endColumn":25,"suppressions":"595"},{"ruleId":"315","severity":1,"message":"596","line":28,"column":10,"nodeType":"313","messageId":"317","endLine":28,"endColumn":22,"suppressions":"597"},{"ruleId":"315","severity":1,"message":"598","line":29,"column":10,"nodeType":"313","messageId":"317","endLine":29,"endColumn":25,"suppressions":"599"},{"ruleId":"315","severity":1,"message":"600","line":31,"column":10,"nodeType":"313","messageId":"317","endLine":31,"endColumn":34,"suppressions":"601"},{"ruleId":"315","severity":1,"message":"602","line":32,"column":10,"nodeType":"313","messageId":"317","endLine":32,"endColumn":37,"suppressions":"603"},{"ruleId":"315","severity":1,"message":"604","line":33,"column":10,"nodeType":"313","messageId":"317","endLine":33,"endColumn":34,"suppressions":"605"},{"ruleId":"315","severity":1,"message":"606","line":34,"column":10,"nodeType":"313","messageId":"317","endLine":34,"endColumn":37,"suppressions":"607"},{"ruleId":"315","severity":1,"message":"608","line":3,"column":3,"nodeType":"313","messageId":"317","endLine":3,"endColumn":33},{"ruleId":"315","severity":1,"message":"609","line":7,"column":3,"nodeType":"313","messageId":"317","endLine":7,"endColumn":36},{"ruleId":"315","severity":1,"message":"610","line":11,"column":37,"nodeType":"313","messageId":"317","endLine":11,"endColumn":50},{"ruleId":"315","severity":1,"message":"611","line":13,"column":56,"nodeType":"313","messageId":"317","endLine":13,"endColumn":71},{"ruleId":"315","severity":1,"message":"612","line":18,"column":13,"nodeType":"313","messageId":"317","endLine":18,"endColumn":19},{"ruleId":"315","severity":1,"message":"582","line":19,"column":14,"nodeType":"313","messageId":"317","endLine":19,"endColumn":21},{"ruleId":"421","severity":1,"message":"422","line":41,"column":24,"nodeType":"423","messageId":"424","endLine":41,"endColumn":26},{"ruleId":"315","severity":1,"message":"613","line":50,"column":9,"nodeType":"313","messageId":"317","endLine":50,"endColumn":29},{"ruleId":"315","severity":1,"message":"614","line":62,"column":11,"nodeType":"313","messageId":"317","endLine":62,"endColumn":34},{"ruleId":"315","severity":1,"message":"615","line":129,"column":34,"nodeType":"313","messageId":"317","endLine":129,"endColumn":52},{"ruleId":"315","severity":1,"message":"616","line":130,"column":27,"nodeType":"313","messageId":"317","endLine":130,"endColumn":39},{"ruleId":"315","severity":1,"message":"614","line":147,"column":11,"nodeType":"313","messageId":"317","endLine":147,"endColumn":34},"@typescript-eslint/no-redeclare","'arr' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'SwappingIcon' is defined but never used.","unusedVar",["617"],"'pdaSeed' is defined but never used.",["618"],"'MAGIC_HAT_CREATOR' is defined but never used.",["619"],"'FEE_WALLET' is defined but never used.",["620"],"'FixedRateConfig' is defined but never used.",["621"],"'REWARD_MINT_ALPHA' is defined but never used.",["622"],"'LpRateConfig' is defined but never used.",["623"],"'ProbableRateConfig' is defined but never used.",["624"],"'WhiteListType' is defined but never used.",["625"],"'magicHat' is assigned a value but never used.",["626"],"'setWhitelists' is assigned a value but never used.",["627"],"'time' is assigned a value but never used.",["628"],"'showWhitelist' is assigned a value but never used.",["629"],"'setShowWhitelist' is assigned a value but never used.",["630"],"'createdWlCounts' is assigned a value but never used.",["631"],"'setCreatedWlCounts' is assigned a value but never used.",["632"],"'currentStakeRoom' is assigned a value but never used.",["633"],"'unstakedNft' is assigned a value but never used.",["634"],"'setUnstakedNft' is assigned a value but never used.",["635"],"'stakedTokens' is assigned a value but never used.",["636"],"'multiplierLevel' is assigned a value but never used.",["637"],"'respectEarned' is assigned a value but never used.",["638"],"'mintResponse' is assigned a value but never used.",["639"],"'setMintResponse' is assigned a value but never used.",["640"],"'mintResponseType' is assigned a value but never used.",["641"],"'setMintResponseType' is assigned a value but never used.",["642"],"'maxCount' is assigned a value but never used.",["643"],"'setMaxCount' is assigned a value but never used.",["644"],"'setBars' is assigned a value but never used.",["645"],"'setShowStakeDashboard' is assigned a value but never used.",["646"],"'farm' is assigned a value but never used.",["647"],"'setFarm' is assigned a value but never used.",["648"],"'humanFarm' is assigned a value but never used.",["649"],"'humanPetsFarm' is assigned a value but never used.",["650"],"'cyborgFarm' is assigned a value but never used.",["651"],"'cyborgPetFarm' is assigned a value but never used.",["652"],"'basementFarm' is assigned a value but never used.",["653"],"'setBasementFarm' is assigned a value but never used.",["654"],"'farmer' is assigned a value but never used.",["655"],"'setFarmer' is assigned a value but never used.",["656"],"'funderOne' is assigned a value but never used.",["657"],"'funderTwo' is assigned a value but never used.",["658"],"'funderThree' is assigned a value but never used.",["659"],"'funderFour' is assigned a value but never used.",["660"],"'funderFive' is assigned a value but never used.",["661"],"'collectionIdMint' is assigned a value but never used.",["662"],"'setCollectionIdMint' is assigned a value but never used.",["663"],"'glitchTokenVal' is assigned a value but never used.",["664"],"'alphaTokenVal' is assigned a value but never used.",["665"],"'k' is assigned a value but never used.",["666"],"'l' is assigned a value but never used.",["667"],"'openStaking' is assigned a value but never used.",["668"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["669"],["670"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getFarmers', 'getFarms', 'getNFTs', 'getStakedNfts', 'getTimeToMInt', and 'getWhitelistAccounts'. Either include them or remove the dependency array.","ArrayExpression",["671"],["672"],"'getProgram' is assigned a value but never used.",["673"],"'findRewardsPotPDA' is assigned a value but never used.",["674"],"'funderToAuthorizePDA' is assigned a value but never used.",["675"],["676"],["677"],["678"],["679"],["680"],["681"],["682"],["683"],["684"],"'initFixedFarmerInst' is assigned a value but never used.",["685"],["686"],["687"],["688"],["689"],["690"],["691"],["692"],["693"],["694"],"'refreshFarmers' is assigned a value but never used.",["695"],"'farms' is assigned a value but never used.",["696"],"'refreshFarmerSigned' is assigned a value but never used.",["697"],["698"],"'initProbableFarmerInst' is assigned a value but never used.",["699"],["700"],["701"],"'farmerBump' is assigned a value but never used.",["702"],"'nft' is assigned a value but never used.",["703"],"'add_init_cyborg_pets' is assigned a value but never used.",["704"],["705"],["706"],["707"],["708"],"'farmers' is assigned a value but never used.",["709"],["710"],["711"],["712"],["713"],"'farmerVaultBump' is assigned a value but never used.",["714"],"'vaults' is assigned a value but never used.",["715"],"'gem_source_old' is assigned a value but never used.",["716"],"'farmAuth' is assigned a value but never used.",["717"],"'whitelistProofPdaVal' is assigned a value but never used.",["718"],"'UnStakeNft' is assigned a value but never used.",["719"],"'farmerPda' is assigned a value but never used.",["720"],["721"],["722"],["723"],["724"],["725"],"'farmTreasury' is assigned a value but never used.",["726"],"'farmTreasuryBump' is assigned a value but never used.",["727"],"'createWhitelistConfig' is assigned a value but never used.",["728"],"'whitelist_config_pda' is assigned a value but never used.",["729"],"'bump' is assigned a value but never used.",["730"],["731"],["732"],["733"],["734"],["735"],["736"],["737"],"'openStakeRoom' is assigned a value but never used.",["738"],"'closeStakeCity' is assigned a value but never used.",["739"],"'mintToCheckedFn' is assigned a value but never used.",["740"],"'createToken' is assigned a value but never used.",["741"],"'alice' is assigned a value but never used.",["742"],"'_bump' is assigned a value but never used.",["743"],"'accounts' is assigned a value but never used.",["744"],"'args' is assigned a value but never used.",["745"],["746"],["747"],["748"],["749"],["750"],["751"],["752"],"'changeGlitchToken' is assigned a value but never used.",["753"],"'swapFn' is assigned a value but never used.",["754"],"'farm_manager' is assigned a value but never used.",["755"],["756"],["757"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["758"],["759"],["760"],["761"],["762"],["763"],["764"],"'PublicKey' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["765"],"'addToBankWhitelistMint' is assigned a value but never used.",["766"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'status', 'done', 'status', 'status', 'status', 'status', 'done', 'status', 'status', 'status', 'status', 'done', 'status', 'done'.","ArrowFunctionExpression","unsafeRefs",["767"],"'GEM_BANK_PROGRAM_ID' is defined but never used.","'getAssociatedTokenAddress' is defined but never used.",["768"],"'getMint' is defined but never used.",["769"],"'Keypair' is defined but never used.",["770"],"'glitchFungTokenArgs' is defined but never used.",["771"],"'Program' is defined but never used.",["772"],"'ataBump' is assigned a value but never used.",["773"],"'stake_instructions' is assigned a value but never used.",["774"],["775"],["776"],"'rewardAPotBump' is assigned a value but never used.",["777"],"'funderHumans' is assigned a value but never used.",["778"],"'funderHumanPets' is assigned a value but never used.",["779"],"'funderCyborg' is assigned a value but never used.",["780"],"'funderCyborgPet' is assigned a value but never used.",["781"],"'authorizationProofHumans' is assigned a value but never used.",["782"],"'authorizationProofHumanPets' is assigned a value but never used.",["783"],"'authorizationProofCyborg' is assigned a value but never used.",["784"],"'authorizationProofCyborgPet' is assigned a value but never used.",["785"],"'createMintToCheckedInstruction' is defined but never used.","'getOrCreateAssociatedTokenAccount' is defined but never used.","'SystemProgram' is defined but never used.","'ALPHA_OWNER_ATA' is defined but never used.","'anchor' is defined but never used.","'mintNewFungibleToken' is assigned a value but never used.","'ownerNewTokenAccountPDA' is assigned a value but never used.","'bumpAlphaTokenSwap' is assigned a value but never used.","'bumpAlphaPot' is assigned a value but never used.",{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"desc":"788","fix":"789"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},{"kind":"786","justification":"787"},"directive","","Update the dependencies array to be: [anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, currentWl, getWhitelistAccounts, getNFTs, getStakedNfts, getFarms, getFarmers, getTimeToMInt]",{"range":"790","text":"791"},[15427,15579],"[anchorWallet, props.magicHatId, props.connection, refreshMagicHatState, wallet, whitelists, shouldMint, currentWl, getWhitelistAccounts, getNFTs, getStakedNfts, getFarms, getFarmers, getTimeToMInt]"]